/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 286.0, "minX": 0.0, "maxY": 10562.0, "series": [{"data": [[0.0, 293.0], [0.1, 293.0], [0.2, 294.0], [0.3, 294.0], [0.4, 294.0], [0.5, 294.0], [0.6, 294.0], [0.7, 297.0], [0.8, 299.0], [0.9, 299.0], [1.0, 300.0], [1.1, 300.0], [1.2, 300.0], [1.3, 300.0], [1.4, 301.0], [1.5, 301.0], [1.6, 302.0], [1.7, 302.0], [1.8, 303.0], [1.9, 303.0], [2.0, 303.0], [2.1, 303.0], [2.2, 304.0], [2.3, 304.0], [2.4, 304.0], [2.5, 304.0], [2.6, 305.0], [2.7, 305.0], [2.8, 305.0], [2.9, 305.0], [3.0, 310.0], [3.1, 310.0], [3.2, 310.0], [3.3, 310.0], [3.4, 311.0], [3.5, 311.0], [3.6, 311.0], [3.7, 311.0], [3.8, 312.0], [3.9, 312.0], [4.0, 312.0], [4.1, 312.0], [4.2, 312.0], [4.3, 312.0], [4.4, 313.0], [4.5, 313.0], [4.6, 313.0], [4.7, 313.0], [4.8, 314.0], [4.9, 314.0], [5.0, 314.0], [5.1, 314.0], [5.2, 315.0], [5.3, 315.0], [5.4, 315.0], [5.5, 315.0], [5.6, 315.0], [5.7, 315.0], [5.8, 316.0], [5.9, 316.0], [6.0, 316.0], [6.1, 316.0], [6.2, 316.0], [6.3, 316.0], [6.4, 317.0], [6.5, 317.0], [6.6, 318.0], [6.7, 318.0], [6.8, 318.0], [6.9, 318.0], [7.0, 319.0], [7.1, 319.0], [7.2, 319.0], [7.3, 319.0], [7.4, 320.0], [7.5, 320.0], [7.6, 320.0], [7.7, 320.0], [7.8, 320.0], [7.9, 320.0], [8.0, 320.0], [8.1, 320.0], [8.2, 320.0], [8.3, 320.0], [8.4, 320.0], [8.5, 320.0], [8.6, 321.0], [8.7, 321.0], [8.8, 321.0], [8.9, 321.0], [9.0, 321.0], [9.1, 321.0], [9.2, 321.0], [9.3, 321.0], [9.4, 321.0], [9.5, 321.0], [9.6, 322.0], [9.7, 322.0], [9.8, 322.0], [9.9, 322.0], [10.0, 323.0], [10.1, 323.0], [10.2, 323.0], [10.3, 323.0], [10.4, 323.0], [10.5, 323.0], [10.6, 323.0], [10.7, 323.0], [10.8, 324.0], [10.9, 324.0], [11.0, 324.0], [11.1, 324.0], [11.2, 324.0], [11.3, 324.0], [11.4, 324.0], [11.5, 324.0], [11.6, 324.0], [11.7, 324.0], [11.8, 325.0], [11.9, 325.0], [12.0, 325.0], [12.1, 325.0], [12.2, 325.0], [12.3, 325.0], [12.4, 326.0], [12.5, 326.0], [12.6, 326.0], [12.7, 326.0], [12.8, 327.0], [12.9, 327.0], [13.0, 327.0], [13.1, 327.0], [13.2, 327.0], [13.3, 327.0], [13.4, 328.0], [13.5, 328.0], [13.6, 328.0], [13.7, 328.0], [13.8, 329.0], [13.9, 329.0], [14.0, 329.0], [14.1, 329.0], [14.2, 329.0], [14.3, 329.0], [14.4, 329.0], [14.5, 329.0], [14.6, 329.0], [14.7, 330.0], [14.8, 330.0], [14.9, 330.0], [15.0, 330.0], [15.1, 330.0], [15.2, 330.0], [15.3, 331.0], [15.4, 331.0], [15.5, 331.0], [15.6, 331.0], [15.7, 332.0], [15.8, 332.0], [15.9, 332.0], [16.0, 332.0], [16.1, 332.0], [16.2, 332.0], [16.3, 332.0], [16.4, 332.0], [16.5, 332.0], [16.6, 332.0], [16.7, 332.0], [16.8, 333.0], [16.9, 333.0], [17.0, 333.0], [17.1, 333.0], [17.2, 333.0], [17.3, 333.0], [17.4, 333.0], [17.5, 333.0], [17.6, 333.0], [17.7, 333.0], [17.8, 334.0], [17.9, 334.0], [18.0, 334.0], [18.1, 334.0], [18.2, 334.0], [18.3, 334.0], [18.4, 334.0], [18.5, 335.0], [18.6, 335.0], [18.7, 335.0], [18.8, 336.0], [18.9, 336.0], [19.0, 337.0], [19.1, 337.0], [19.2, 337.0], [19.3, 337.0], [19.4, 337.0], [19.5, 337.0], [19.6, 337.0], [19.7, 337.0], [19.8, 337.0], [19.9, 337.0], [20.0, 338.0], [20.1, 338.0], [20.2, 339.0], [20.3, 339.0], [20.4, 339.0], [20.5, 339.0], [20.6, 339.0], [20.7, 339.0], [20.8, 339.0], [20.9, 339.0], [21.0, 339.0], [21.1, 339.0], [21.2, 339.0], [21.3, 339.0], [21.4, 340.0], [21.5, 340.0], [21.6, 340.0], [21.7, 340.0], [21.8, 340.0], [21.9, 340.0], [22.0, 341.0], [22.1, 341.0], [22.2, 341.0], [22.3, 341.0], [22.4, 342.0], [22.5, 342.0], [22.6, 342.0], [22.7, 342.0], [22.8, 342.0], [22.9, 342.0], [23.0, 342.0], [23.1, 342.0], [23.2, 342.0], [23.3, 342.0], [23.4, 342.0], [23.5, 342.0], [23.6, 343.0], [23.7, 343.0], [23.8, 343.0], [23.9, 343.0], [24.0, 343.0], [24.1, 343.0], [24.2, 343.0], [24.3, 343.0], [24.4, 344.0], [24.5, 344.0], [24.6, 344.0], [24.7, 344.0], [24.8, 344.0], [24.9, 344.0], [25.0, 345.0], [25.1, 345.0], [25.2, 345.0], [25.3, 345.0], [25.4, 346.0], [25.5, 346.0], [25.6, 346.0], [25.7, 346.0], [25.8, 346.0], [25.9, 346.0], [26.0, 347.0], [26.1, 347.0], [26.2, 349.0], [26.3, 349.0], [26.4, 349.0], [26.5, 349.0], [26.6, 352.0], [26.7, 352.0], [26.8, 354.0], [26.9, 354.0], [27.0, 354.0], [27.1, 354.0], [27.2, 354.0], [27.3, 354.0], [27.4, 354.0], [27.5, 354.0], [27.6, 354.0], [27.7, 354.0], [27.8, 355.0], [27.9, 355.0], [28.0, 356.0], [28.1, 356.0], [28.2, 357.0], [28.3, 357.0], [28.4, 358.0], [28.5, 358.0], [28.6, 359.0], [28.7, 359.0], [28.8, 361.0], [28.9, 361.0], [29.0, 362.0], [29.1, 362.0], [29.2, 362.0], [29.3, 362.0], [29.4, 363.0], [29.5, 363.0], [29.6, 364.0], [29.7, 364.0], [29.8, 365.0], [29.9, 365.0], [30.0, 366.0], [30.1, 366.0], [30.2, 367.0], [30.3, 367.0], [30.4, 367.0], [30.5, 367.0], [30.6, 369.0], [30.7, 369.0], [30.8, 369.0], [30.9, 369.0], [31.0, 371.0], [31.1, 371.0], [31.2, 372.0], [31.3, 372.0], [31.4, 374.0], [31.5, 374.0], [31.6, 374.0], [31.7, 374.0], [31.8, 376.0], [31.9, 376.0], [32.0, 376.0], [32.1, 376.0], [32.2, 377.0], [32.3, 377.0], [32.4, 377.0], [32.5, 377.0], [32.6, 377.0], [32.7, 377.0], [32.8, 378.0], [32.9, 378.0], [33.0, 378.0], [33.1, 378.0], [33.2, 379.0], [33.3, 379.0], [33.4, 381.0], [33.5, 381.0], [33.6, 382.0], [33.7, 382.0], [33.8, 384.0], [33.9, 384.0], [34.0, 386.0], [34.1, 386.0], [34.2, 387.0], [34.3, 387.0], [34.4, 389.0], [34.5, 389.0], [34.6, 390.0], [34.7, 390.0], [34.8, 390.0], [34.9, 391.0], [35.0, 391.0], [35.1, 392.0], [35.2, 392.0], [35.3, 393.0], [35.4, 393.0], [35.5, 393.0], [35.6, 393.0], [35.7, 395.0], [35.8, 395.0], [35.9, 395.0], [36.0, 395.0], [36.1, 401.0], [36.2, 401.0], [36.3, 409.0], [36.4, 409.0], [36.5, 410.0], [36.6, 410.0], [36.7, 411.0], [36.8, 411.0], [36.9, 415.0], [37.0, 415.0], [37.1, 421.0], [37.2, 421.0], [37.3, 423.0], [37.4, 423.0], [37.5, 429.0], [37.6, 429.0], [37.7, 438.0], [37.8, 438.0], [37.9, 447.0], [38.0, 447.0], [38.1, 470.0], [38.2, 470.0], [38.3, 507.0], [38.4, 507.0], [38.5, 531.0], [38.6, 531.0], [38.7, 542.0], [38.8, 542.0], [38.9, 556.0], [39.0, 556.0], [39.1, 558.0], [39.2, 558.0], [39.3, 573.0], [39.4, 573.0], [39.5, 573.0], [39.6, 573.0], [39.7, 574.0], [39.8, 574.0], [39.9, 574.0], [40.0, 574.0], [40.1, 574.0], [40.2, 574.0], [40.3, 575.0], [40.4, 575.0], [40.5, 578.0], [40.6, 578.0], [40.7, 578.0], [40.8, 578.0], [40.9, 578.0], [41.0, 578.0], [41.1, 579.0], [41.2, 579.0], [41.3, 580.0], [41.4, 580.0], [41.5, 581.0], [41.6, 581.0], [41.7, 583.0], [41.8, 583.0], [41.9, 584.0], [42.0, 584.0], [42.1, 584.0], [42.2, 584.0], [42.3, 586.0], [42.4, 586.0], [42.5, 589.0], [42.6, 589.0], [42.7, 590.0], [42.8, 590.0], [42.9, 590.0], [43.0, 590.0], [43.1, 590.0], [43.2, 590.0], [43.3, 590.0], [43.4, 590.0], [43.5, 591.0], [43.6, 591.0], [43.7, 591.0], [43.8, 591.0], [43.9, 591.0], [44.0, 591.0], [44.1, 592.0], [44.2, 592.0], [44.3, 592.0], [44.4, 592.0], [44.5, 593.0], [44.6, 593.0], [44.7, 593.0], [44.8, 593.0], [44.9, 594.0], [45.0, 594.0], [45.1, 594.0], [45.2, 594.0], [45.3, 594.0], [45.4, 594.0], [45.5, 595.0], [45.6, 595.0], [45.7, 595.0], [45.8, 595.0], [45.9, 595.0], [46.0, 595.0], [46.1, 595.0], [46.2, 595.0], [46.3, 596.0], [46.4, 596.0], [46.5, 596.0], [46.6, 596.0], [46.7, 596.0], [46.8, 596.0], [46.9, 596.0], [47.0, 596.0], [47.1, 597.0], [47.2, 597.0], [47.3, 598.0], [47.4, 598.0], [47.5, 598.0], [47.6, 598.0], [47.7, 598.0], [47.8, 598.0], [47.9, 599.0], [48.0, 599.0], [48.1, 599.0], [48.2, 599.0], [48.3, 599.0], [48.4, 599.0], [48.5, 599.0], [48.6, 599.0], [48.7, 600.0], [48.8, 600.0], [48.9, 600.0], [49.0, 600.0], [49.1, 600.0], [49.2, 600.0], [49.3, 600.0], [49.4, 600.0], [49.5, 600.0], [49.6, 600.0], [49.7, 601.0], [49.8, 601.0], [49.9, 601.0], [50.0, 601.0], [50.1, 601.0], [50.2, 601.0], [50.3, 601.0], [50.4, 601.0], [50.5, 601.0], [50.6, 601.0], [50.7, 601.0], [50.8, 601.0], [50.9, 601.0], [51.0, 601.0], [51.1, 602.0], [51.2, 602.0], [51.3, 602.0], [51.4, 602.0], [51.5, 602.0], [51.6, 602.0], [51.7, 602.0], [51.8, 602.0], [51.9, 602.0], [52.0, 602.0], [52.1, 603.0], [52.2, 603.0], [52.3, 603.0], [52.4, 603.0], [52.5, 603.0], [52.6, 603.0], [52.7, 603.0], [52.8, 603.0], [52.9, 603.0], [53.0, 603.0], [53.1, 603.0], [53.2, 603.0], [53.3, 604.0], [53.4, 604.0], [53.5, 604.0], [53.6, 604.0], [53.7, 604.0], [53.8, 604.0], [53.9, 605.0], [54.0, 605.0], [54.1, 605.0], [54.2, 605.0], [54.3, 605.0], [54.4, 605.0], [54.5, 605.0], [54.6, 605.0], [54.7, 605.0], [54.8, 605.0], [54.9, 605.0], [55.0, 605.0], [55.1, 605.0], [55.2, 605.0], [55.3, 606.0], [55.4, 606.0], [55.5, 606.0], [55.6, 606.0], [55.7, 606.0], [55.8, 606.0], [55.9, 606.0], [56.0, 606.0], [56.1, 606.0], [56.2, 606.0], [56.3, 606.0], [56.4, 606.0], [56.5, 607.0], [56.6, 607.0], [56.7, 607.0], [56.8, 607.0], [56.9, 607.0], [57.0, 607.0], [57.1, 607.0], [57.2, 607.0], [57.3, 607.0], [57.4, 607.0], [57.5, 608.0], [57.6, 608.0], [57.7, 608.0], [57.8, 608.0], [57.9, 608.0], [58.0, 608.0], [58.1, 609.0], [58.2, 609.0], [58.3, 609.0], [58.4, 609.0], [58.5, 609.0], [58.6, 609.0], [58.7, 609.0], [58.8, 609.0], [58.9, 609.0], [59.0, 609.0], [59.1, 609.0], [59.2, 609.0], [59.3, 609.0], [59.4, 609.0], [59.5, 609.0], [59.6, 609.0], [59.7, 610.0], [59.8, 610.0], [59.9, 610.0], [60.0, 610.0], [60.1, 610.0], [60.2, 610.0], [60.3, 610.0], [60.4, 610.0], [60.5, 610.0], [60.6, 610.0], [60.7, 610.0], [60.8, 610.0], [60.9, 610.0], [61.0, 610.0], [61.1, 611.0], [61.2, 611.0], [61.3, 611.0], [61.4, 611.0], [61.5, 611.0], [61.6, 611.0], [61.7, 611.0], [61.8, 611.0], [61.9, 611.0], [62.0, 611.0], [62.1, 611.0], [62.2, 611.0], [62.3, 611.0], [62.4, 611.0], [62.5, 611.0], [62.6, 611.0], [62.7, 611.0], [62.8, 611.0], [62.9, 611.0], [63.0, 611.0], [63.1, 612.0], [63.2, 612.0], [63.3, 612.0], [63.4, 612.0], [63.5, 612.0], [63.6, 612.0], [63.7, 612.0], [63.8, 612.0], [63.9, 612.0], [64.0, 612.0], [64.1, 613.0], [64.2, 613.0], [64.3, 613.0], [64.4, 613.0], [64.5, 613.0], [64.6, 613.0], [64.7, 613.0], [64.8, 613.0], [64.9, 613.0], [65.0, 613.0], [65.1, 613.0], [65.2, 613.0], [65.3, 613.0], [65.4, 613.0], [65.5, 614.0], [65.6, 614.0], [65.7, 614.0], [65.8, 614.0], [65.9, 614.0], [66.0, 614.0], [66.1, 614.0], [66.2, 614.0], [66.3, 614.0], [66.4, 614.0], [66.5, 615.0], [66.6, 615.0], [66.7, 615.0], [66.8, 615.0], [66.9, 615.0], [67.0, 615.0], [67.1, 615.0], [67.2, 615.0], [67.3, 615.0], [67.4, 615.0], [67.5, 615.0], [67.6, 615.0], [67.7, 616.0], [67.8, 616.0], [67.9, 616.0], [68.0, 616.0], [68.1, 616.0], [68.2, 616.0], [68.3, 616.0], [68.4, 616.0], [68.5, 617.0], [68.6, 617.0], [68.7, 617.0], [68.8, 617.0], [68.9, 617.0], [69.0, 617.0], [69.1, 617.0], [69.2, 617.0], [69.3, 618.0], [69.4, 618.0], [69.5, 618.0], [69.6, 618.0], [69.7, 619.0], [69.8, 619.0], [69.9, 619.0], [70.0, 619.0], [70.1, 619.0], [70.2, 619.0], [70.3, 619.0], [70.4, 619.0], [70.5, 619.0], [70.6, 619.0], [70.7, 619.0], [70.8, 619.0], [70.9, 619.0], [71.0, 619.0], [71.1, 620.0], [71.2, 620.0], [71.3, 620.0], [71.4, 620.0], [71.5, 621.0], [71.6, 621.0], [71.7, 621.0], [71.8, 621.0], [71.9, 622.0], [72.0, 622.0], [72.1, 622.0], [72.2, 622.0], [72.3, 622.0], [72.4, 622.0], [72.5, 622.0], [72.6, 622.0], [72.7, 622.0], [72.8, 622.0], [72.9, 623.0], [73.0, 623.0], [73.1, 623.0], [73.2, 623.0], [73.3, 623.0], [73.4, 623.0], [73.5, 623.0], [73.6, 623.0], [73.7, 623.0], [73.8, 623.0], [73.9, 624.0], [74.0, 624.0], [74.1, 624.0], [74.2, 624.0], [74.3, 624.0], [74.4, 624.0], [74.5, 625.0], [74.6, 625.0], [74.7, 625.0], [74.8, 625.0], [74.9, 625.0], [75.0, 625.0], [75.1, 625.0], [75.2, 625.0], [75.3, 625.0], [75.4, 625.0], [75.5, 625.0], [75.6, 625.0], [75.7, 626.0], [75.8, 626.0], [75.9, 626.0], [76.0, 626.0], [76.1, 627.0], [76.2, 627.0], [76.3, 627.0], [76.4, 627.0], [76.5, 628.0], [76.6, 628.0], [76.7, 628.0], [76.8, 628.0], [76.9, 628.0], [77.0, 628.0], [77.1, 628.0], [77.2, 628.0], [77.3, 629.0], [77.4, 629.0], [77.5, 629.0], [77.6, 629.0], [77.7, 629.0], [77.8, 629.0], [77.9, 629.0], [78.0, 629.0], [78.1, 630.0], [78.2, 630.0], [78.3, 630.0], [78.4, 630.0], [78.5, 631.0], [78.6, 631.0], [78.7, 631.0], [78.8, 631.0], [78.9, 631.0], [79.0, 631.0], [79.1, 632.0], [79.2, 632.0], [79.3, 632.0], [79.4, 632.0], [79.5, 633.0], [79.6, 633.0], [79.7, 633.0], [79.8, 633.0], [79.9, 634.0], [80.0, 634.0], [80.1, 634.0], [80.2, 634.0], [80.3, 634.0], [80.4, 634.0], [80.5, 634.0], [80.6, 634.0], [80.7, 634.0], [80.8, 634.0], [80.9, 635.0], [81.0, 635.0], [81.1, 635.0], [81.2, 635.0], [81.3, 636.0], [81.4, 636.0], [81.5, 636.0], [81.6, 636.0], [81.7, 637.0], [81.8, 637.0], [81.9, 637.0], [82.0, 637.0], [82.1, 637.0], [82.2, 637.0], [82.3, 638.0], [82.4, 638.0], [82.5, 639.0], [82.6, 639.0], [82.7, 639.0], [82.8, 639.0], [82.9, 641.0], [83.0, 641.0], [83.1, 641.0], [83.2, 641.0], [83.3, 641.0], [83.4, 641.0], [83.5, 641.0], [83.6, 641.0], [83.7, 642.0], [83.8, 642.0], [83.9, 642.0], [84.0, 642.0], [84.1, 644.0], [84.2, 644.0], [84.3, 646.0], [84.4, 646.0], [84.5, 646.0], [84.6, 646.0], [84.7, 648.0], [84.8, 648.0], [84.9, 648.0], [85.0, 648.0], [85.1, 650.0], [85.2, 650.0], [85.3, 650.0], [85.4, 650.0], [85.5, 650.0], [85.6, 650.0], [85.7, 652.0], [85.8, 652.0], [85.9, 653.0], [86.0, 653.0], [86.1, 653.0], [86.2, 653.0], [86.3, 655.0], [86.4, 655.0], [86.5, 655.0], [86.6, 655.0], [86.7, 655.0], [86.8, 655.0], [86.9, 657.0], [87.0, 657.0], [87.1, 658.0], [87.2, 658.0], [87.3, 658.0], [87.4, 658.0], [87.5, 658.0], [87.6, 658.0], [87.7, 659.0], [87.8, 659.0], [87.9, 660.0], [88.0, 660.0], [88.1, 661.0], [88.2, 661.0], [88.3, 662.0], [88.4, 662.0], [88.5, 662.0], [88.6, 662.0], [88.7, 662.0], [88.8, 662.0], [88.9, 663.0], [89.0, 663.0], [89.1, 664.0], [89.2, 664.0], [89.3, 664.0], [89.4, 664.0], [89.5, 665.0], [89.6, 665.0], [89.7, 666.0], [89.8, 666.0], [89.9, 666.0], [90.0, 666.0], [90.1, 668.0], [90.2, 668.0], [90.3, 671.0], [90.4, 671.0], [90.5, 672.0], [90.6, 672.0], [90.7, 674.0], [90.8, 674.0], [90.9, 675.0], [91.0, 675.0], [91.1, 677.0], [91.2, 677.0], [91.3, 678.0], [91.4, 678.0], [91.5, 681.0], [91.6, 681.0], [91.7, 682.0], [91.8, 682.0], [91.9, 682.0], [92.0, 682.0], [92.1, 683.0], [92.2, 683.0], [92.3, 686.0], [92.4, 686.0], [92.5, 687.0], [92.6, 687.0], [92.7, 689.0], [92.8, 689.0], [92.9, 692.0], [93.0, 692.0], [93.1, 694.0], [93.2, 694.0], [93.3, 698.0], [93.4, 698.0], [93.5, 700.0], [93.6, 700.0], [93.7, 708.0], [93.8, 708.0], [93.9, 710.0], [94.0, 710.0], [94.1, 715.0], [94.2, 715.0], [94.3, 715.0], [94.4, 715.0], [94.5, 719.0], [94.6, 719.0], [94.7, 722.0], [94.8, 722.0], [94.9, 724.0], [95.0, 724.0], [95.1, 725.0], [95.2, 725.0], [95.3, 727.0], [95.4, 727.0], [95.5, 728.0], [95.6, 728.0], [95.7, 731.0], [95.8, 731.0], [95.9, 733.0], [96.0, 733.0], [96.1, 737.0], [96.2, 737.0], [96.3, 740.0], [96.4, 740.0], [96.5, 751.0], [96.6, 751.0], [96.7, 751.0], [96.8, 751.0], [96.9, 751.0], [97.0, 751.0], [97.1, 756.0], [97.2, 756.0], [97.3, 756.0], [97.4, 756.0], [97.5, 757.0], [97.6, 757.0], [97.7, 764.0], [97.8, 764.0], [97.9, 781.0], [98.0, 781.0], [98.1, 793.0], [98.2, 793.0], [98.3, 793.0], [98.4, 793.0], [98.5, 859.0], [98.6, 859.0], [98.7, 861.0], [98.8, 861.0], [98.9, 863.0], [99.0, 863.0], [99.1, 867.0], [99.2, 867.0], [99.3, 884.0], [99.4, 884.0], [99.5, 930.0], [99.6, 930.0], [99.7, 1029.0], [99.8, 1029.0], [99.9, 2952.0], [100.0, 2952.0]], "isOverall": false, "label": "POST addRegistrationToCart/", "isController": false}, {"data": [[0.0, 286.0], [0.1, 286.0], [0.2, 287.0], [0.3, 287.0], [0.4, 289.0], [0.5, 289.0], [0.6, 289.0], [0.7, 291.0], [0.8, 296.0], [0.9, 296.0], [1.0, 298.0], [1.1, 298.0], [1.2, 299.0], [1.3, 299.0], [1.4, 300.0], [1.5, 300.0], [1.6, 303.0], [1.7, 303.0], [1.8, 304.0], [1.9, 304.0], [2.0, 318.0], [2.1, 318.0], [2.2, 322.0], [2.3, 322.0], [2.4, 327.0], [2.5, 327.0], [2.6, 329.0], [2.7, 329.0], [2.8, 329.0], [2.9, 342.0], [3.0, 342.0], [3.1, 344.0], [3.2, 344.0], [3.3, 394.0], [3.4, 394.0], [3.5, 401.0], [3.6, 401.0], [3.7, 412.0], [3.8, 412.0], [3.9, 419.0], [4.0, 419.0], [4.1, 427.0], [4.2, 427.0], [4.3, 430.0], [4.4, 430.0], [4.5, 441.0], [4.6, 441.0], [4.7, 442.0], [4.8, 442.0], [4.9, 471.0], [5.0, 471.0], [5.1, 479.0], [5.2, 479.0], [5.3, 482.0], [5.4, 482.0], [5.5, 483.0], [5.6, 483.0], [5.7, 484.0], [5.8, 484.0], [5.9, 500.0], [6.0, 500.0], [6.1, 521.0], [6.2, 521.0], [6.3, 524.0], [6.4, 524.0], [6.5, 529.0], [6.6, 529.0], [6.7, 532.0], [6.8, 532.0], [6.9, 533.0], [7.0, 533.0], [7.1, 552.0], [7.2, 552.0], [7.3, 552.0], [7.4, 552.0], [7.5, 553.0], [7.6, 553.0], [7.7, 556.0], [7.8, 556.0], [7.9, 558.0], [8.0, 558.0], [8.1, 558.0], [8.2, 558.0], [8.3, 564.0], [8.4, 564.0], [8.5, 571.0], [8.6, 571.0], [8.7, 577.0], [8.8, 577.0], [8.9, 578.0], [9.0, 578.0], [9.1, 582.0], [9.2, 582.0], [9.3, 585.0], [9.4, 587.0], [9.5, 587.0], [9.6, 591.0], [9.7, 591.0], [9.8, 594.0], [9.9, 594.0], [10.0, 597.0], [10.1, 597.0], [10.2, 598.0], [10.3, 598.0], [10.4, 599.0], [10.5, 599.0], [10.6, 605.0], [10.7, 605.0], [10.8, 605.0], [10.9, 605.0], [11.0, 606.0], [11.1, 606.0], [11.2, 608.0], [11.3, 608.0], [11.4, 611.0], [11.5, 611.0], [11.6, 620.0], [11.7, 620.0], [11.8, 623.0], [11.9, 623.0], [12.0, 626.0], [12.1, 626.0], [12.2, 630.0], [12.3, 630.0], [12.4, 637.0], [12.5, 637.0], [12.6, 645.0], [12.7, 645.0], [12.8, 664.0], [12.9, 664.0], [13.0, 673.0], [13.1, 673.0], [13.2, 685.0], [13.3, 685.0], [13.4, 691.0], [13.5, 691.0], [13.6, 692.0], [13.7, 692.0], [13.8, 693.0], [13.9, 693.0], [14.0, 694.0], [14.1, 694.0], [14.2, 696.0], [14.3, 696.0], [14.4, 698.0], [14.5, 698.0], [14.6, 703.0], [14.7, 703.0], [14.8, 707.0], [14.9, 707.0], [15.0, 708.0], [15.1, 708.0], [15.2, 710.0], [15.3, 710.0], [15.4, 716.0], [15.5, 716.0], [15.6, 719.0], [15.7, 719.0], [15.8, 722.0], [15.9, 722.0], [16.0, 725.0], [16.1, 725.0], [16.2, 726.0], [16.3, 726.0], [16.4, 727.0], [16.5, 727.0], [16.6, 733.0], [16.7, 733.0], [16.8, 733.0], [16.9, 733.0], [17.0, 734.0], [17.1, 734.0], [17.2, 735.0], [17.3, 735.0], [17.4, 737.0], [17.5, 737.0], [17.6, 737.0], [17.7, 737.0], [17.8, 741.0], [17.9, 741.0], [18.0, 741.0], [18.1, 741.0], [18.2, 745.0], [18.3, 745.0], [18.4, 757.0], [18.5, 757.0], [18.6, 757.0], [18.7, 757.0], [18.8, 759.0], [18.9, 759.0], [19.0, 760.0], [19.1, 760.0], [19.2, 774.0], [19.3, 774.0], [19.4, 776.0], [19.5, 776.0], [19.6, 777.0], [19.7, 777.0], [19.8, 777.0], [19.9, 777.0], [20.0, 777.0], [20.1, 777.0], [20.2, 787.0], [20.3, 787.0], [20.4, 789.0], [20.5, 789.0], [20.6, 803.0], [20.7, 803.0], [20.8, 810.0], [20.9, 810.0], [21.0, 815.0], [21.1, 815.0], [21.2, 828.0], [21.3, 828.0], [21.4, 828.0], [21.5, 828.0], [21.6, 831.0], [21.7, 831.0], [21.8, 839.0], [21.9, 839.0], [22.0, 842.0], [22.1, 842.0], [22.2, 845.0], [22.3, 845.0], [22.4, 858.0], [22.5, 858.0], [22.6, 863.0], [22.7, 863.0], [22.8, 874.0], [22.9, 874.0], [23.0, 875.0], [23.1, 875.0], [23.2, 881.0], [23.3, 881.0], [23.4, 883.0], [23.5, 883.0], [23.6, 903.0], [23.7, 903.0], [23.8, 909.0], [23.9, 909.0], [24.0, 915.0], [24.1, 915.0], [24.2, 926.0], [24.3, 926.0], [24.4, 932.0], [24.5, 932.0], [24.6, 934.0], [24.7, 934.0], [24.8, 947.0], [24.9, 947.0], [25.0, 947.0], [25.1, 947.0], [25.2, 950.0], [25.3, 950.0], [25.4, 956.0], [25.5, 956.0], [25.6, 958.0], [25.7, 958.0], [25.8, 960.0], [25.9, 960.0], [26.0, 966.0], [26.1, 966.0], [26.2, 970.0], [26.3, 970.0], [26.4, 972.0], [26.5, 972.0], [26.6, 976.0], [26.7, 976.0], [26.8, 988.0], [26.9, 988.0], [27.0, 992.0], [27.1, 992.0], [27.2, 1001.0], [27.3, 1001.0], [27.4, 1007.0], [27.5, 1007.0], [27.6, 1009.0], [27.7, 1009.0], [27.8, 1030.0], [27.9, 1030.0], [28.0, 1046.0], [28.1, 1046.0], [28.2, 1047.0], [28.3, 1047.0], [28.4, 1054.0], [28.5, 1054.0], [28.6, 1057.0], [28.7, 1057.0], [28.8, 1062.0], [28.9, 1062.0], [29.0, 1068.0], [29.1, 1068.0], [29.2, 1073.0], [29.3, 1073.0], [29.4, 1075.0], [29.5, 1075.0], [29.6, 1079.0], [29.7, 1079.0], [29.8, 1090.0], [29.9, 1090.0], [30.0, 1091.0], [30.1, 1091.0], [30.2, 1094.0], [30.3, 1094.0], [30.4, 1097.0], [30.5, 1097.0], [30.6, 1100.0], [30.7, 1100.0], [30.8, 1106.0], [30.9, 1106.0], [31.0, 1109.0], [31.1, 1109.0], [31.2, 1111.0], [31.3, 1111.0], [31.4, 1120.0], [31.5, 1120.0], [31.6, 1128.0], [31.7, 1128.0], [31.8, 1133.0], [31.9, 1133.0], [32.0, 1146.0], [32.1, 1146.0], [32.2, 1147.0], [32.3, 1147.0], [32.4, 1148.0], [32.5, 1148.0], [32.6, 1150.0], [32.7, 1150.0], [32.8, 1159.0], [32.9, 1159.0], [33.0, 1179.0], [33.1, 1179.0], [33.2, 1181.0], [33.3, 1181.0], [33.4, 1185.0], [33.5, 1185.0], [33.6, 1186.0], [33.7, 1186.0], [33.8, 1198.0], [33.9, 1198.0], [34.0, 1204.0], [34.1, 1204.0], [34.2, 1207.0], [34.3, 1207.0], [34.4, 1214.0], [34.5, 1214.0], [34.6, 1215.0], [34.7, 1215.0], [34.8, 1221.0], [34.9, 1221.0], [35.0, 1224.0], [35.1, 1224.0], [35.2, 1224.0], [35.3, 1224.0], [35.4, 1228.0], [35.5, 1228.0], [35.6, 1234.0], [35.7, 1234.0], [35.8, 1237.0], [35.9, 1237.0], [36.0, 1241.0], [36.1, 1241.0], [36.2, 1249.0], [36.3, 1249.0], [36.4, 1255.0], [36.5, 1255.0], [36.6, 1281.0], [36.7, 1281.0], [36.8, 1283.0], [36.9, 1283.0], [37.0, 1298.0], [37.1, 1298.0], [37.2, 1304.0], [37.3, 1304.0], [37.4, 1308.0], [37.5, 1308.0], [37.6, 1309.0], [37.7, 1309.0], [37.8, 1315.0], [37.9, 1315.0], [38.0, 1316.0], [38.1, 1316.0], [38.2, 1344.0], [38.3, 1344.0], [38.4, 1344.0], [38.5, 1348.0], [38.6, 1348.0], [38.7, 1348.0], [38.8, 1348.0], [38.9, 1352.0], [39.0, 1352.0], [39.1, 1352.0], [39.2, 1360.0], [39.3, 1360.0], [39.4, 1360.0], [39.5, 1366.0], [39.6, 1366.0], [39.7, 1367.0], [39.8, 1367.0], [39.9, 1373.0], [40.0, 1373.0], [40.1, 1376.0], [40.2, 1376.0], [40.3, 1382.0], [40.4, 1382.0], [40.5, 1390.0], [40.6, 1390.0], [40.7, 1396.0], [40.8, 1396.0], [40.9, 1405.0], [41.0, 1405.0], [41.1, 1407.0], [41.2, 1407.0], [41.3, 1408.0], [41.4, 1408.0], [41.5, 1411.0], [41.6, 1411.0], [41.7, 1419.0], [41.8, 1419.0], [41.9, 1422.0], [42.0, 1422.0], [42.1, 1428.0], [42.2, 1428.0], [42.3, 1436.0], [42.4, 1436.0], [42.5, 1436.0], [42.6, 1436.0], [42.7, 1436.0], [42.8, 1436.0], [42.9, 1446.0], [43.0, 1446.0], [43.1, 1448.0], [43.2, 1448.0], [43.3, 1448.0], [43.4, 1448.0], [43.5, 1457.0], [43.6, 1457.0], [43.7, 1460.0], [43.8, 1460.0], [43.9, 1461.0], [44.0, 1461.0], [44.1, 1463.0], [44.2, 1463.0], [44.3, 1465.0], [44.4, 1465.0], [44.5, 1476.0], [44.6, 1476.0], [44.7, 1479.0], [44.8, 1479.0], [44.9, 1487.0], [45.0, 1487.0], [45.1, 1487.0], [45.2, 1487.0], [45.3, 1488.0], [45.4, 1488.0], [45.5, 1494.0], [45.6, 1494.0], [45.7, 1503.0], [45.8, 1503.0], [45.9, 1510.0], [46.0, 1510.0], [46.1, 1510.0], [46.2, 1510.0], [46.3, 1512.0], [46.4, 1512.0], [46.5, 1519.0], [46.6, 1519.0], [46.7, 1523.0], [46.8, 1523.0], [46.9, 1533.0], [47.0, 1533.0], [47.1, 1542.0], [47.2, 1542.0], [47.3, 1545.0], [47.4, 1545.0], [47.5, 1554.0], [47.6, 1554.0], [47.7, 1557.0], [47.8, 1557.0], [47.9, 1568.0], [48.0, 1568.0], [48.1, 1572.0], [48.2, 1572.0], [48.3, 1577.0], [48.4, 1577.0], [48.5, 1579.0], [48.6, 1579.0], [48.7, 1579.0], [48.8, 1579.0], [48.9, 1579.0], [49.0, 1579.0], [49.1, 1591.0], [49.2, 1591.0], [49.3, 1597.0], [49.4, 1597.0], [49.5, 1600.0], [49.6, 1600.0], [49.7, 1605.0], [49.8, 1605.0], [49.9, 1618.0], [50.0, 1618.0], [50.1, 1619.0], [50.2, 1619.0], [50.3, 1621.0], [50.4, 1621.0], [50.5, 1631.0], [50.6, 1631.0], [50.7, 1637.0], [50.8, 1637.0], [50.9, 1639.0], [51.0, 1639.0], [51.1, 1646.0], [51.2, 1646.0], [51.3, 1650.0], [51.4, 1650.0], [51.5, 1665.0], [51.6, 1665.0], [51.7, 1675.0], [51.8, 1675.0], [51.9, 1682.0], [52.0, 1682.0], [52.1, 1684.0], [52.2, 1684.0], [52.3, 1692.0], [52.4, 1692.0], [52.5, 1714.0], [52.6, 1714.0], [52.7, 1721.0], [52.8, 1721.0], [52.9, 1723.0], [53.0, 1723.0], [53.1, 1726.0], [53.2, 1726.0], [53.3, 1729.0], [53.4, 1729.0], [53.5, 1731.0], [53.6, 1731.0], [53.7, 1731.0], [53.8, 1731.0], [53.9, 1756.0], [54.0, 1756.0], [54.1, 1756.0], [54.2, 1756.0], [54.3, 1760.0], [54.4, 1760.0], [54.5, 1770.0], [54.6, 1770.0], [54.7, 1771.0], [54.8, 1771.0], [54.9, 1780.0], [55.0, 1780.0], [55.1, 1782.0], [55.2, 1782.0], [55.3, 1793.0], [55.4, 1793.0], [55.5, 1799.0], [55.6, 1799.0], [55.7, 1799.0], [55.8, 1799.0], [55.9, 1802.0], [56.0, 1802.0], [56.1, 1819.0], [56.2, 1819.0], [56.3, 1821.0], [56.4, 1821.0], [56.5, 1823.0], [56.6, 1823.0], [56.7, 1843.0], [56.8, 1843.0], [56.9, 1845.0], [57.0, 1845.0], [57.1, 1846.0], [57.2, 1846.0], [57.3, 1851.0], [57.4, 1851.0], [57.5, 1860.0], [57.6, 1860.0], [57.7, 1872.0], [57.8, 1872.0], [57.9, 1881.0], [58.0, 1881.0], [58.1, 1881.0], [58.2, 1881.0], [58.3, 1886.0], [58.4, 1886.0], [58.5, 1887.0], [58.6, 1887.0], [58.7, 1889.0], [58.8, 1889.0], [58.9, 1897.0], [59.0, 1897.0], [59.1, 1904.0], [59.2, 1904.0], [59.3, 1907.0], [59.4, 1907.0], [59.5, 1917.0], [59.6, 1917.0], [59.7, 1924.0], [59.8, 1924.0], [59.9, 1927.0], [60.0, 1927.0], [60.1, 1935.0], [60.2, 1935.0], [60.3, 1938.0], [60.4, 1938.0], [60.5, 1953.0], [60.6, 1953.0], [60.7, 1958.0], [60.8, 1958.0], [60.9, 1970.0], [61.0, 1970.0], [61.1, 1984.0], [61.2, 1984.0], [61.3, 1985.0], [61.4, 1985.0], [61.5, 1996.0], [61.6, 1996.0], [61.7, 2012.0], [61.8, 2012.0], [61.9, 2016.0], [62.0, 2016.0], [62.1, 2020.0], [62.2, 2020.0], [62.3, 2029.0], [62.4, 2029.0], [62.5, 2036.0], [62.6, 2036.0], [62.7, 2036.0], [62.8, 2036.0], [62.9, 2052.0], [63.0, 2052.0], [63.1, 2052.0], [63.2, 2052.0], [63.3, 2054.0], [63.4, 2054.0], [63.5, 2059.0], [63.6, 2059.0], [63.7, 2080.0], [63.8, 2080.0], [63.9, 2084.0], [64.0, 2084.0], [64.1, 2104.0], [64.2, 2104.0], [64.3, 2105.0], [64.4, 2105.0], [64.5, 2127.0], [64.6, 2127.0], [64.7, 2152.0], [64.8, 2152.0], [64.9, 2177.0], [65.0, 2177.0], [65.1, 2179.0], [65.2, 2179.0], [65.3, 2186.0], [65.4, 2186.0], [65.5, 2194.0], [65.6, 2194.0], [65.7, 2200.0], [65.8, 2200.0], [65.9, 2208.0], [66.0, 2208.0], [66.1, 2215.0], [66.2, 2215.0], [66.3, 2218.0], [66.4, 2218.0], [66.5, 2220.0], [66.6, 2220.0], [66.7, 2228.0], [66.8, 2228.0], [66.9, 2229.0], [67.0, 2229.0], [67.1, 2239.0], [67.2, 2239.0], [67.3, 2249.0], [67.4, 2249.0], [67.5, 2273.0], [67.6, 2273.0], [67.7, 2275.0], [67.8, 2275.0], [67.9, 2284.0], [68.0, 2284.0], [68.1, 2292.0], [68.2, 2292.0], [68.3, 2294.0], [68.4, 2294.0], [68.5, 2321.0], [68.6, 2321.0], [68.7, 2323.0], [68.8, 2323.0], [68.9, 2331.0], [69.0, 2331.0], [69.1, 2332.0], [69.2, 2332.0], [69.3, 2349.0], [69.4, 2349.0], [69.5, 2349.0], [69.6, 2349.0], [69.7, 2353.0], [69.8, 2353.0], [69.9, 2374.0], [70.0, 2374.0], [70.1, 2390.0], [70.2, 2390.0], [70.3, 2398.0], [70.4, 2398.0], [70.5, 2400.0], [70.6, 2400.0], [70.7, 2402.0], [70.8, 2402.0], [70.9, 2407.0], [71.0, 2407.0], [71.1, 2420.0], [71.2, 2420.0], [71.3, 2428.0], [71.4, 2428.0], [71.5, 2458.0], [71.6, 2458.0], [71.7, 2468.0], [71.8, 2468.0], [71.9, 2474.0], [72.0, 2474.0], [72.1, 2481.0], [72.2, 2481.0], [72.3, 2487.0], [72.4, 2487.0], [72.5, 2493.0], [72.6, 2493.0], [72.7, 2495.0], [72.8, 2495.0], [72.9, 2497.0], [73.0, 2497.0], [73.1, 2503.0], [73.2, 2503.0], [73.3, 2507.0], [73.4, 2507.0], [73.5, 2517.0], [73.6, 2517.0], [73.7, 2523.0], [73.8, 2523.0], [73.9, 2539.0], [74.0, 2539.0], [74.1, 2542.0], [74.2, 2542.0], [74.3, 2553.0], [74.4, 2553.0], [74.5, 2579.0], [74.6, 2579.0], [74.7, 2604.0], [74.8, 2604.0], [74.9, 2606.0], [75.0, 2606.0], [75.1, 2621.0], [75.2, 2621.0], [75.3, 2633.0], [75.4, 2633.0], [75.5, 2665.0], [75.6, 2665.0], [75.7, 2676.0], [75.8, 2676.0], [75.9, 2680.0], [76.0, 2680.0], [76.1, 2695.0], [76.2, 2695.0], [76.3, 2707.0], [76.4, 2707.0], [76.5, 2715.0], [76.6, 2715.0], [76.7, 2722.0], [76.8, 2722.0], [76.9, 2750.0], [77.0, 2750.0], [77.1, 2797.0], [77.2, 2797.0], [77.3, 2807.0], [77.4, 2807.0], [77.5, 2824.0], [77.6, 2824.0], [77.7, 2831.0], [77.8, 2831.0], [77.9, 2839.0], [78.0, 2839.0], [78.1, 2849.0], [78.2, 2849.0], [78.3, 2873.0], [78.4, 2873.0], [78.5, 2938.0], [78.6, 2938.0], [78.7, 2942.0], [78.8, 2942.0], [78.9, 3012.0], [79.0, 3012.0], [79.1, 3017.0], [79.2, 3017.0], [79.3, 3023.0], [79.4, 3023.0], [79.5, 3056.0], [79.6, 3056.0], [79.7, 3066.0], [79.8, 3066.0], [79.9, 3074.0], [80.0, 3074.0], [80.1, 3104.0], [80.2, 3104.0], [80.3, 3171.0], [80.4, 3171.0], [80.5, 3181.0], [80.6, 3181.0], [80.7, 3198.0], [80.8, 3198.0], [80.9, 3214.0], [81.0, 3214.0], [81.1, 3215.0], [81.2, 3215.0], [81.3, 3225.0], [81.4, 3225.0], [81.5, 3242.0], [81.6, 3242.0], [81.7, 3263.0], [81.8, 3263.0], [81.9, 3268.0], [82.0, 3268.0], [82.1, 3312.0], [82.2, 3312.0], [82.3, 3315.0], [82.4, 3315.0], [82.5, 3338.0], [82.6, 3338.0], [82.7, 3366.0], [82.8, 3366.0], [82.9, 3408.0], [83.0, 3408.0], [83.1, 3448.0], [83.2, 3448.0], [83.3, 3454.0], [83.4, 3454.0], [83.5, 3486.0], [83.6, 3486.0], [83.7, 3584.0], [83.8, 3584.0], [83.9, 3639.0], [84.0, 3639.0], [84.1, 3645.0], [84.2, 3645.0], [84.3, 3657.0], [84.4, 3657.0], [84.5, 3758.0], [84.6, 3758.0], [84.7, 3784.0], [84.8, 3784.0], [84.9, 3803.0], [85.0, 3803.0], [85.1, 3804.0], [85.2, 3804.0], [85.3, 3872.0], [85.4, 3872.0], [85.5, 3903.0], [85.6, 3903.0], [85.7, 3945.0], [85.8, 3945.0], [85.9, 3955.0], [86.0, 3955.0], [86.1, 4045.0], [86.2, 4045.0], [86.3, 4050.0], [86.4, 4050.0], [86.5, 4075.0], [86.6, 4075.0], [86.7, 4229.0], [86.8, 4229.0], [86.9, 4272.0], [87.0, 4272.0], [87.1, 4291.0], [87.2, 4291.0], [87.3, 4295.0], [87.4, 4295.0], [87.5, 4309.0], [87.6, 4309.0], [87.7, 4378.0], [87.8, 4378.0], [87.9, 4425.0], [88.0, 4425.0], [88.1, 4436.0], [88.2, 4436.0], [88.3, 4441.0], [88.4, 4441.0], [88.5, 4498.0], [88.6, 4498.0], [88.7, 4540.0], [88.8, 4540.0], [88.9, 4730.0], [89.0, 4730.0], [89.1, 4777.0], [89.2, 4777.0], [89.3, 4881.0], [89.4, 4881.0], [89.5, 4940.0], [89.6, 4940.0], [89.7, 5225.0], [89.8, 5225.0], [89.9, 5244.0], [90.0, 5244.0], [90.1, 5387.0], [90.2, 5387.0], [90.3, 5502.0], [90.4, 5502.0], [90.5, 5554.0], [90.6, 5554.0], [90.7, 5628.0], [90.8, 5628.0], [90.9, 5669.0], [91.0, 5669.0], [91.1, 5734.0], [91.2, 5734.0], [91.3, 6008.0], [91.4, 6008.0], [91.5, 6260.0], [91.6, 6260.0], [91.7, 6298.0], [91.8, 6298.0], [91.9, 6391.0], [92.0, 6391.0], [92.1, 6550.0], [92.2, 6550.0], [92.3, 6993.0], [92.4, 6993.0], [92.5, 7101.0], [92.6, 7101.0], [92.7, 7349.0], [92.8, 7349.0], [92.9, 8144.0], [93.0, 8144.0], [93.1, 8217.0], [93.2, 8217.0], [93.3, 8374.0], [93.4, 8374.0], [93.5, 8427.0], [93.6, 8427.0], [93.7, 8480.0], [93.8, 8480.0], [93.9, 8518.0], [94.0, 8518.0], [94.1, 8795.0], [94.2, 8795.0], [94.3, 8821.0], [94.4, 8821.0], [94.5, 9602.0], [94.6, 9602.0], [94.7, 10011.0], [94.8, 10011.0], [94.9, 10147.0], [95.0, 10147.0], [95.1, 10157.0], [95.2, 10157.0], [95.3, 10161.0], [95.4, 10161.0], [95.5, 10165.0], [95.6, 10165.0], [95.7, 10184.0], [95.8, 10184.0], [95.9, 10192.0], [96.0, 10192.0], [96.1, 10195.0], [96.2, 10195.0], [96.3, 10203.0], [96.4, 10203.0], [96.5, 10277.0], [96.6, 10277.0], [96.7, 10375.0], [96.8, 10375.0], [96.9, 10411.0], [97.0, 10411.0], [97.1, 10423.0], [97.2, 10423.0], [97.3, 10441.0], [97.4, 10441.0], [97.5, 10451.0], [97.6, 10451.0], [97.7, 10482.0], [97.8, 10482.0], [97.9, 10501.0], [98.0, 10501.0], [98.1, 10508.0], [98.2, 10508.0], [98.3, 10510.0], [98.4, 10510.0], [98.5, 10511.0], [98.6, 10511.0], [98.7, 10534.0], [98.8, 10534.0], [98.9, 10538.0], [99.0, 10538.0], [99.1, 10540.0], [99.2, 10540.0], [99.3, 10548.0], [99.4, 10548.0], [99.5, 10549.0], [99.6, 10549.0], [99.7, 10550.0], [99.8, 10550.0], [99.9, 10562.0], [100.0, 10562.0]], "isOverall": false, "label": "GET getRegistrationFromCart/", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 224.0, "series": [{"data": [[600.0, 224.0], [300.0, 175.0], [700.0, 25.0], [2900.0, 1.0], [800.0, 5.0], [400.0, 11.0], [200.0, 5.0], [900.0, 1.0], [1000.0, 1.0], [500.0, 52.0]], "isOverall": false, "label": "POST addRegistrationToCart/", "isController": false}, {"data": [[600.0, 20.0], [700.0, 30.0], [800.0, 15.0], [900.0, 18.0], [1000.0, 17.0], [1100.0, 17.0], [1200.0, 16.0], [1300.0, 18.0], [1400.0, 24.0], [1500.0, 19.0], [1600.0, 15.0], [1700.0, 17.0], [1800.0, 16.0], [1900.0, 13.0], [2000.0, 12.0], [2100.0, 8.0], [2200.0, 14.0], [2300.0, 10.0], [2400.0, 13.0], [2500.0, 8.0], [2600.0, 8.0], [2800.0, 6.0], [2700.0, 5.0], [2900.0, 2.0], [3000.0, 6.0], [3100.0, 4.0], [3200.0, 6.0], [3300.0, 4.0], [3400.0, 4.0], [3500.0, 1.0], [3600.0, 3.0], [3700.0, 2.0], [3800.0, 3.0], [3900.0, 3.0], [4000.0, 3.0], [4200.0, 4.0], [4300.0, 2.0], [4500.0, 1.0], [4400.0, 4.0], [4700.0, 2.0], [4800.0, 1.0], [4900.0, 1.0], [5200.0, 2.0], [5300.0, 1.0], [5500.0, 2.0], [5600.0, 2.0], [5700.0, 1.0], [6000.0, 1.0], [6300.0, 1.0], [6200.0, 2.0], [6500.0, 1.0], [6900.0, 1.0], [7100.0, 1.0], [7300.0, 1.0], [8100.0, 1.0], [8200.0, 1.0], [8500.0, 1.0], [8700.0, 1.0], [8300.0, 1.0], [8400.0, 2.0], [8800.0, 1.0], [9600.0, 1.0], [10100.0, 7.0], [10200.0, 2.0], [10000.0, 1.0], [10400.0, 5.0], [10300.0, 1.0], [10500.0, 11.0], [200.0, 7.0], [300.0, 10.0], [400.0, 12.0], [500.0, 24.0]], "isOverall": false, "label": "GET getRegistrationFromCart/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 506.0, "series": [{"data": [[0.0, 221.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 506.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 247.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 26.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.2631578947368425, "minX": 1.6466775E12, "maxY": 496.73333333333335, "series": [{"data": [[1.64667756E12, 488.5], [1.64667978E12, 144.23809523809524], [1.64667918E12, 233.0], [1.64667816E12, 390.2352941176471], [1.64667876E12, 297.0], [1.64667936E12, 206.0], [1.64668038E12, 50.733333333333334], [1.646679E12, 257.2631578947368], [1.6466796E12, 170.73333333333332], [1.64668062E12, 15.5], [1.64667798E12, 417.5], [1.64667858E12, 325.76190476190476], [1.6466802E12, 77.26315789473684], [1.64667852E12, 335.0], [1.64667912E12, 242.73684210526315], [1.64668014E12, 86.5], [1.6466775E12, 496.73333333333335], [1.64668032E12, 58.76470588235294], [1.6466781E12, 399.76190476190476], [1.64667972E12, 153.76470588235293], [1.64667774E12, 458.7391304347826], [1.64668056E12, 25.5], [1.64667834E12, 361.0], [1.64667996E12, 114.73684210526316], [1.64667894E12, 267.0], [1.64667792E12, 428.0], [1.64667954E12, 178.26666666666668], [1.64667948E12, 188.0], [1.64668008E12, 95.5], [1.64667786E12, 439.0], [1.64667846E12, 343.7368421052632], [1.64667906E12, 250.0], [1.64668068E12, 5.2631578947368425], [1.6466787E12, 305.5], [1.64667768E12, 469.5], [1.6466793E12, 213.76470588235293], [1.64667828E12, 371.0], [1.6466805E12, 35.0], [1.64667888E12, 277.5], [1.6466799E12, 123.76470588235294], [1.64667822E12, 381.0], [1.64667882E12, 287.5], [1.64668044E12, 43.5], [1.6466778E12, 448.5], [1.64668002E12, 105.0], [1.64667942E12, 198.23529411764707], [1.6466784E12, 352.26666666666665], [1.64667804E12, 409.0], [1.64668026E12, 67.73684210526316], [1.64667864E12, 314.7391304347826], [1.64667966E12, 162.5], [1.64667924E12, 223.0], [1.64667984E12, 133.5], [1.64667762E12, 479.2631578947368]], "isOverall": false, "label": "Thread Group - Load Test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64668068E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 286.0, "minX": 1.0, "maxY": 10562.0, "series": [{"data": [[2.0, 619.0], [3.0, 619.0], [4.0, 332.0], [5.0, 387.0], [6.0, 595.0], [7.0, 344.0], [8.0, 603.0], [9.0, 596.0], [10.0, 423.0], [11.0, 605.0], [12.0, 606.0], [13.0, 354.0], [14.0, 311.0], [15.0, 605.0], [16.0, 611.0], [17.0, 342.0], [18.0, 355.0], [19.0, 303.0], [20.0, 604.0], [21.0, 429.0], [22.0, 415.0], [23.0, 604.0], [24.0, 334.0], [25.0, 616.0], [26.0, 339.0], [27.0, 344.0], [28.0, 605.0], [29.0, 327.0], [30.0, 574.0], [31.0, 630.0], [33.0, 312.0], [32.0, 613.0], [35.0, 592.0], [34.0, 389.0], [37.0, 584.0], [36.0, 616.0], [39.0, 574.0], [38.0, 603.0], [41.0, 325.0], [40.0, 622.0], [43.0, 610.0], [42.0, 614.0], [45.0, 339.0], [44.0, 655.0], [47.0, 634.0], [46.0, 602.0], [49.0, 354.0], [48.0, 609.0], [51.0, 661.0], [50.0, 609.0], [53.0, 578.0], [52.0, 708.0], [55.0, 613.0], [54.0, 311.0], [57.0, 602.0], [56.0, 622.0], [59.0, 613.0], [58.0, 596.0], [61.0, 600.0], [60.0, 668.0], [63.0, 315.0], [62.0, 410.0], [67.0, 556.0], [66.0, 700.0], [65.0, 590.0], [64.0, 320.0], [71.0, 601.0], [70.0, 627.0], [69.0, 650.0], [68.0, 318.0], [75.0, 603.0], [74.0, 595.0], [73.0, 686.0], [72.0, 612.0], [79.0, 323.0], [78.0, 722.0], [77.0, 601.0], [76.0, 628.0], [83.0, 662.0], [82.0, 595.0], [81.0, 330.0], [80.0, 391.0], [87.0, 793.0], [86.0, 612.0], [85.0, 316.0], [84.0, 386.0], [91.0, 591.0], [90.0, 660.0], [89.0, 599.0], [88.0, 609.0], [95.0, 618.0], [94.0, 378.0], [93.0, 740.0], [92.0, 320.0], [99.0, 751.0], [98.0, 320.0], [97.0, 591.0], [96.0, 349.0], [103.0, 863.0], [102.0, 598.0], [101.0, 371.0], [100.0, 305.0], [107.0, 305.0], [106.0, 614.0], [105.0, 342.0], [104.0, 757.0], [111.0, 607.0], [110.0, 321.0], [109.0, 619.0], [108.0, 339.0], [115.0, 342.0], [114.0, 635.0], [113.0, 625.0], [112.0, 636.0], [119.0, 354.0], [118.0, 590.0], [117.0, 316.0], [116.0, 337.0], [123.0, 756.0], [122.0, 622.0], [121.0, 610.0], [120.0, 591.0], [127.0, 593.0], [126.0, 648.0], [125.0, 303.0], [124.0, 573.0], [135.0, 320.0], [134.0, 574.0], [133.0, 372.0], [132.0, 625.0], [131.0, 637.0], [130.0, 313.0], [129.0, 338.0], [128.0, 333.0], [143.0, 751.0], [142.0, 617.0], [141.0, 293.0], [140.0, 675.0], [139.0, 329.0], [138.0, 393.0], [137.0, 606.0], [136.0, 623.0], [151.0, 606.0], [150.0, 342.0], [149.0, 657.0], [148.0, 672.0], [147.0, 606.0], [146.0, 595.0], [145.0, 604.0], [144.0, 600.0], [159.0, 337.0], [158.0, 314.0], [157.0, 384.0], [156.0, 326.0], [155.0, 339.0], [154.0, 341.0], [153.0, 623.0], [152.0, 600.0], [167.0, 317.0], [166.0, 314.0], [165.0, 354.0], [164.0, 332.0], [163.0, 601.0], [162.0, 613.0], [161.0, 609.0], [160.0, 366.0], [175.0, 793.0], [174.0, 724.0], [173.0, 320.0], [172.0, 330.0], [171.0, 361.0], [170.0, 598.0], [169.0, 634.0], [168.0, 324.0], [183.0, 320.0], [182.0, 341.0], [181.0, 619.0], [180.0, 652.0], [179.0, 324.0], [178.0, 600.0], [177.0, 316.0], [176.0, 573.0], [191.0, 737.0], [190.0, 601.0], [189.0, 611.0], [188.0, 583.0], [187.0, 328.0], [186.0, 605.0], [185.0, 327.0], [184.0, 625.0], [199.0, 599.0], [198.0, 615.0], [197.0, 626.0], [196.0, 611.0], [195.0, 607.0], [194.0, 310.0], [193.0, 362.0], [192.0, 608.0], [207.0, 607.0], [206.0, 294.0], [205.0, 324.0], [204.0, 329.0], [203.0, 605.0], [202.0, 694.0], [201.0, 339.0], [200.0, 364.0], [215.0, 354.0], [214.0, 648.0], [213.0, 438.0], [212.0, 304.0], [211.0, 304.0], [210.0, 393.0], [209.0, 610.0], [208.0, 334.0], [223.0, 300.0], [222.0, 635.0], [221.0, 727.0], [220.0, 580.0], [219.0, 620.0], [218.0, 622.0], [217.0, 584.0], [216.0, 340.0], [231.0, 333.0], [230.0, 615.0], [229.0, 609.0], [228.0, 621.0], [227.0, 594.0], [226.0, 614.0], [225.0, 363.0], [224.0, 330.0], [239.0, 602.0], [238.0, 666.0], [237.0, 411.0], [236.0, 610.0], [235.0, 610.0], [234.0, 658.0], [233.0, 333.0], [232.0, 345.0], [247.0, 611.0], [246.0, 617.0], [245.0, 637.0], [244.0, 333.0], [243.0, 421.0], [242.0, 342.0], [241.0, 625.0], [240.0, 601.0], [255.0, 597.0], [254.0, 578.0], [253.0, 626.0], [252.0, 312.0], [251.0, 662.0], [250.0, 603.0], [249.0, 641.0], [248.0, 650.0], [270.0, 322.0], [271.0, 655.0], [269.0, 731.0], [268.0, 609.0], [267.0, 639.0], [266.0, 369.0], [265.0, 666.0], [264.0, 335.0], [263.0, 659.0], [257.0, 725.0], [256.0, 639.0], [259.0, 681.0], [258.0, 323.0], [262.0, 377.0], [261.0, 632.0], [260.0, 605.0], [286.0, 599.0], [287.0, 470.0], [285.0, 616.0], [284.0, 678.0], [283.0, 664.0], [282.0, 579.0], [281.0, 600.0], [280.0, 615.0], [279.0, 620.0], [273.0, 294.0], [272.0, 401.0], [275.0, 608.0], [274.0, 319.0], [278.0, 631.0], [277.0, 310.0], [276.0, 313.0], [302.0, 329.0], [303.0, 629.0], [301.0, 315.0], [300.0, 608.0], [299.0, 342.0], [298.0, 378.0], [297.0, 671.0], [296.0, 603.0], [295.0, 507.0], [289.0, 624.0], [288.0, 629.0], [291.0, 610.0], [290.0, 594.0], [294.0, 664.0], [293.0, 617.0], [292.0, 581.0], [318.0, 358.0], [319.0, 751.0], [317.0, 628.0], [316.0, 575.0], [315.0, 710.0], [314.0, 611.0], [313.0, 615.0], [312.0, 301.0], [311.0, 589.0], [305.0, 395.0], [304.0, 447.0], [307.0, 321.0], [306.0, 650.0], [310.0, 376.0], [309.0, 619.0], [308.0, 596.0], [334.0, 612.0], [335.0, 655.0], [333.0, 619.0], [332.0, 319.0], [331.0, 558.0], [330.0, 332.0], [329.0, 715.0], [328.0, 609.0], [327.0, 390.0], [321.0, 692.0], [320.0, 615.0], [323.0, 607.0], [322.0, 658.0], [326.0, 625.0], [325.0, 325.0], [324.0, 322.0], [350.0, 614.0], [351.0, 344.0], [349.0, 594.0], [348.0, 369.0], [347.0, 333.0], [346.0, 756.0], [345.0, 331.0], [344.0, 312.0], [343.0, 603.0], [337.0, 658.0], [336.0, 321.0], [339.0, 621.0], [338.0, 698.0], [342.0, 615.0], [341.0, 625.0], [340.0, 335.0], [366.0, 325.0], [367.0, 302.0], [365.0, 601.0], [364.0, 332.0], [363.0, 318.0], [362.0, 627.0], [361.0, 377.0], [360.0, 339.0], [359.0, 297.0], [353.0, 531.0], [352.0, 376.0], [355.0, 346.0], [354.0, 586.0], [358.0, 365.0], [357.0, 611.0], [356.0, 392.0], [382.0, 340.0], [383.0, 346.0], [381.0, 590.0], [380.0, 682.0], [379.0, 683.0], [378.0, 607.0], [377.0, 605.0], [376.0, 641.0], [375.0, 300.0], [369.0, 357.0], [368.0, 642.0], [371.0, 578.0], [370.0, 602.0], [374.0, 340.0], [373.0, 343.0], [372.0, 326.0], [398.0, 610.0], [399.0, 613.0], [397.0, 343.0], [396.0, 593.0], [395.0, 343.0], [394.0, 631.0], [393.0, 337.0], [392.0, 606.0], [391.0, 374.0], [385.0, 642.0], [384.0, 329.0], [387.0, 638.0], [386.0, 343.0], [390.0, 634.0], [389.0, 687.0], [388.0, 611.0], [414.0, 609.0], [415.0, 623.0], [413.0, 614.0], [412.0, 299.0], [411.0, 352.0], [410.0, 641.0], [409.0, 611.0], [408.0, 631.0], [407.0, 719.0], [401.0, 324.0], [400.0, 381.0], [403.0, 601.0], [402.0, 321.0], [406.0, 715.0], [405.0, 345.0], [404.0, 884.0], [430.0, 637.0], [431.0, 590.0], [429.0, 409.0], [428.0, 374.0], [427.0, 612.0], [426.0, 632.0], [425.0, 641.0], [424.0, 612.0], [423.0, 646.0], [417.0, 324.0], [416.0, 336.0], [419.0, 332.0], [418.0, 617.0], [422.0, 611.0], [421.0, 395.0], [420.0, 634.0], [446.0, 629.0], [447.0, 599.0], [445.0, 362.0], [444.0, 636.0], [443.0, 662.0], [442.0, 327.0], [441.0, 629.0], [440.0, 653.0], [439.0, 347.0], [433.0, 331.0], [432.0, 633.0], [435.0, 613.0], [434.0, 682.0], [438.0, 781.0], [437.0, 332.0], [436.0, 616.0], [462.0, 628.0], [463.0, 623.0], [461.0, 596.0], [460.0, 367.0], [459.0, 859.0], [458.0, 613.0], [457.0, 367.0], [456.0, 334.0], [455.0, 382.0], [449.0, 728.0], [448.0, 337.0], [451.0, 689.0], [450.0, 628.0], [454.0, 323.0], [453.0, 328.0], [452.0, 323.0], [478.0, 379.0], [479.0, 624.0], [477.0, 665.0], [476.0, 606.0], [475.0, 867.0], [474.0, 630.0], [473.0, 337.0], [472.0, 346.0], [471.0, 602.0], [465.0, 321.0], [464.0, 611.0], [467.0, 644.0], [466.0, 633.0], [470.0, 623.0], [469.0, 356.0], [468.0, 315.0], [494.0, 653.0], [495.0, 618.0], [493.0, 1029.0], [492.0, 634.0], [491.0, 622.0], [490.0, 677.0], [489.0, 377.0], [488.0, 598.0], [487.0, 646.0], [481.0, 624.0], [480.0, 861.0], [483.0, 674.0], [482.0, 733.0], [486.0, 359.0], [485.0, 542.0], [484.0, 930.0], [500.0, 2952.0], [499.0, 663.0], [498.0, 764.0], [497.0, 619.0], [496.0, 349.0], [1.0, 592.0]], "isOverall": false, "label": "POST addRegistrationToCart/", "isController": false}, {"data": [[250.5, 528.2139999999997]], "isOverall": false, "label": "POST addRegistrationToCart/-Aggregated", "isController": false}, {"data": [[2.0, 1889.0], [3.0, 598.0], [4.0, 828.0], [5.0, 839.0], [6.0, 2542.0], [7.0, 558.0], [8.0, 1407.0], [9.0, 2275.0], [10.0, 2036.0], [11.0, 1373.0], [12.0, 1782.0], [13.0, 803.0], [14.0, 828.0], [15.0, 5225.0], [16.0, 734.0], [17.0, 1075.0], [18.0, 915.0], [19.0, 831.0], [20.0, 2604.0], [21.0, 6298.0], [22.0, 673.0], [23.0, 741.0], [24.0, 1793.0], [25.0, 1579.0], [26.0, 289.0], [27.0, 2942.0], [28.0, 1348.0], [29.0, 4777.0], [30.0, 2400.0], [31.0, 342.0], [33.0, 1179.0], [32.0, 956.0], [35.0, 1348.0], [34.0, 3181.0], [37.0, 3263.0], [36.0, 10550.0], [39.0, 479.0], [38.0, 620.0], [41.0, 1111.0], [40.0, 988.0], [43.0, 3803.0], [42.0, 759.0], [45.0, 10534.0], [44.0, 10441.0], [47.0, 10161.0], [46.0, 1600.0], [49.0, 1185.0], [48.0, 10562.0], [51.0, 1090.0], [50.0, 1100.0], [53.0, 1463.0], [52.0, 1001.0], [55.0, 2503.0], [54.0, 3171.0], [57.0, 10548.0], [56.0, 3903.0], [59.0, 1675.0], [58.0, 725.0], [61.0, 430.0], [60.0, 2177.0], [63.0, 8480.0], [62.0, 1255.0], [67.0, 564.0], [66.0, 1682.0], [65.0, 1461.0], [64.0, 2807.0], [71.0, 1938.0], [70.0, 1094.0], [69.0, 3448.0], [68.0, 1631.0], [75.0, 1731.0], [74.0, 874.0], [73.0, 5669.0], [72.0, 394.0], [79.0, 1557.0], [78.0, 2695.0], [77.0, 1382.0], [76.0, 1460.0], [83.0, 2323.0], [82.0, 10508.0], [81.0, 1030.0], [80.0, 1860.0], [87.0, 1283.0], [86.0, 4272.0], [85.0, 10277.0], [84.0, 2938.0], [91.0, 2374.0], [90.0, 1422.0], [89.0, 875.0], [88.0, 1799.0], [95.0, 571.0], [94.0, 1579.0], [93.0, 1545.0], [92.0, 1621.0], [99.0, 2200.0], [98.0, 1650.0], [97.0, 2208.0], [96.0, 8821.0], [103.0, 4309.0], [102.0, 2750.0], [101.0, 703.0], [100.0, 2722.0], [107.0, 1047.0], [106.0, 1198.0], [105.0, 3315.0], [104.0, 1760.0], [111.0, 2127.0], [110.0, 10165.0], [109.0, 2553.0], [108.0, 883.0], [115.0, 3198.0], [114.0, 1396.0], [113.0, 608.0], [112.0, 1237.0], [119.0, 1046.0], [118.0, 1097.0], [117.0, 2294.0], [116.0, 1487.0], [123.0, 777.0], [122.0, 698.0], [121.0, 787.0], [120.0, 2493.0], [127.0, 2824.0], [126.0, 4436.0], [125.0, 777.0], [124.0, 2849.0], [135.0, 401.0], [134.0, 2633.0], [133.0, 2321.0], [132.0, 950.0], [131.0, 524.0], [130.0, 774.0], [129.0, 1771.0], [128.0, 3242.0], [143.0, 1692.0], [142.0, 1714.0], [141.0, 5554.0], [140.0, 693.0], [139.0, 2179.0], [138.0, 582.0], [137.0, 733.0], [136.0, 1542.0], [151.0, 2621.0], [150.0, 1352.0], [149.0, 623.0], [148.0, 4940.0], [147.0, 3486.0], [146.0, 1729.0], [145.0, 1510.0], [144.0, 1221.0], [159.0, 605.0], [158.0, 10192.0], [157.0, 1367.0], [156.0, 10501.0], [155.0, 4425.0], [154.0, 1935.0], [153.0, 1181.0], [152.0, 2331.0], [167.0, 3408.0], [166.0, 1510.0], [165.0, 1224.0], [164.0, 1009.0], [163.0, 471.0], [162.0, 3104.0], [161.0, 10011.0], [160.0, 1881.0], [175.0, 1091.0], [174.0, 2707.0], [173.0, 1073.0], [172.0, 344.0], [171.0, 322.0], [170.0, 1731.0], [169.0, 2353.0], [168.0, 10540.0], [183.0, 533.0], [182.0, 1068.0], [181.0, 10549.0], [180.0, 2831.0], [179.0, 2273.0], [178.0, 645.0], [177.0, 2239.0], [176.0, 10511.0], [191.0, 696.0], [190.0, 708.0], [189.0, 1639.0], [188.0, 1846.0], [187.0, 300.0], [186.0, 810.0], [185.0, 3214.0], [184.0, 970.0], [199.0, 7349.0], [198.0, 291.0], [197.0, 10510.0], [196.0, 1360.0], [195.0, 2606.0], [194.0, 412.0], [193.0, 1376.0], [192.0, 1819.0], [207.0, 8144.0], [206.0, 737.0], [205.0, 10203.0], [204.0, 2194.0], [203.0, 4229.0], [202.0, 1917.0], [201.0, 1897.0], [200.0, 5734.0], [215.0, 3945.0], [214.0, 1446.0], [213.0, 845.0], [212.0, 1479.0], [211.0, 6260.0], [210.0, 6550.0], [209.0, 1109.0], [208.0, 664.0], [223.0, 441.0], [222.0, 1281.0], [221.0, 1436.0], [220.0, 1214.0], [219.0, 2218.0], [218.0, 1519.0], [217.0, 1958.0], [216.0, 1308.0], [231.0, 3758.0], [230.0, 626.0], [229.0, 2186.0], [228.0, 932.0], [227.0, 2715.0], [226.0, 3804.0], [225.0, 789.0], [224.0, 1924.0], [239.0, 327.0], [238.0, 842.0], [237.0, 685.0], [236.0, 1579.0], [235.0, 735.0], [234.0, 1881.0], [233.0, 1298.0], [232.0, 1605.0], [247.0, 1106.0], [246.0, 1249.0], [245.0, 482.0], [244.0, 694.0], [243.0, 298.0], [242.0, 532.0], [241.0, 2487.0], [240.0, 2084.0], [255.0, 587.0], [254.0, 726.0], [253.0, 2507.0], [252.0, 10538.0], [251.0, 2579.0], [250.0, 10411.0], [249.0, 3268.0], [248.0, 8427.0], [270.0, 881.0], [271.0, 5628.0], [269.0, 1770.0], [268.0, 777.0], [267.0, 3012.0], [266.0, 745.0], [265.0, 2059.0], [264.0, 1057.0], [263.0, 815.0], [257.0, 594.0], [256.0, 757.0], [259.0, 1352.0], [258.0, 6008.0], [262.0, 2797.0], [261.0, 1887.0], [260.0, 577.0], [286.0, 1970.0], [287.0, 1309.0], [285.0, 2152.0], [284.0, 1133.0], [283.0, 1821.0], [282.0, 1007.0], [281.0, 578.0], [280.0, 9602.0], [279.0, 2517.0], [273.0, 1054.0], [272.0, 1476.0], [275.0, 1637.0], [274.0, 552.0], [278.0, 1120.0], [277.0, 958.0], [276.0, 3366.0], [302.0, 427.0], [303.0, 287.0], [301.0, 500.0], [300.0, 1186.0], [299.0, 599.0], [298.0, 1448.0], [297.0, 1128.0], [296.0, 1494.0], [295.0, 947.0], [289.0, 3023.0], [288.0, 4295.0], [291.0, 3225.0], [290.0, 3017.0], [294.0, 2104.0], [293.0, 442.0], [292.0, 10451.0], [318.0, 707.0], [319.0, 419.0], [317.0, 1419.0], [316.0, 2402.0], [315.0, 1146.0], [314.0, 4881.0], [313.0, 1845.0], [312.0, 4441.0], [311.0, 318.0], [305.0, 1315.0], [304.0, 2873.0], [307.0, 3784.0], [306.0, 8374.0], [310.0, 2249.0], [309.0, 3454.0], [308.0, 6391.0], [334.0, 1204.0], [335.0, 8795.0], [333.0, 966.0], [332.0, 903.0], [331.0, 2680.0], [330.0, 1488.0], [329.0, 3312.0], [328.0, 3645.0], [327.0, 2016.0], [321.0, 1457.0], [320.0, 926.0], [323.0, 722.0], [322.0, 1405.0], [326.0, 1904.0], [325.0, 972.0], [324.0, 2332.0], [350.0, 1062.0], [351.0, 10157.0], [349.0, 4498.0], [348.0, 1577.0], [347.0, 1228.0], [346.0, 484.0], [345.0, 719.0], [344.0, 303.0], [343.0, 909.0], [337.0, 1646.0], [336.0, 2036.0], [339.0, 558.0], [338.0, 8518.0], [342.0, 591.0], [341.0, 1823.0], [340.0, 8217.0], [366.0, 727.0], [367.0, 3056.0], [365.0, 1907.0], [364.0, 1533.0], [363.0, 1619.0], [362.0, 2839.0], [361.0, 947.0], [360.0, 1428.0], [359.0, 733.0], [353.0, 2105.0], [352.0, 1503.0], [355.0, 2284.0], [354.0, 3657.0], [358.0, 960.0], [357.0, 976.0], [356.0, 10195.0], [382.0, 4730.0], [383.0, 1436.0], [381.0, 4540.0], [380.0, 2052.0], [379.0, 2468.0], [378.0, 529.0], [377.0, 992.0], [376.0, 2495.0], [375.0, 1448.0], [369.0, 299.0], [368.0, 1996.0], [371.0, 1851.0], [370.0, 1927.0], [374.0, 2228.0], [373.0, 304.0], [372.0, 2080.0], [398.0, 1886.0], [399.0, 2474.0], [397.0, 521.0], [396.0, 1207.0], [395.0, 3066.0], [394.0, 1408.0], [393.0, 1723.0], [392.0, 1843.0], [391.0, 553.0], [385.0, 934.0], [384.0, 2390.0], [387.0, 2539.0], [386.0, 1756.0], [390.0, 1148.0], [389.0, 3872.0], [388.0, 10184.0], [414.0, 1436.0], [415.0, 2349.0], [413.0, 692.0], [412.0, 691.0], [411.0, 2054.0], [410.0, 1665.0], [409.0, 716.0], [408.0, 710.0], [407.0, 5387.0], [401.0, 5502.0], [400.0, 858.0], [403.0, 1411.0], [402.0, 4045.0], [406.0, 10147.0], [405.0, 7101.0], [404.0, 1234.0], [430.0, 2407.0], [431.0, 286.0], [429.0, 1159.0], [428.0, 1872.0], [427.0, 585.0], [426.0, 2665.0], [425.0, 776.0], [424.0, 760.0], [423.0, 1465.0], [417.0, 2481.0], [416.0, 1079.0], [419.0, 4378.0], [418.0, 6993.0], [422.0, 1985.0], [421.0, 4291.0], [420.0, 2349.0], [446.0, 3074.0], [447.0, 10482.0], [445.0, 606.0], [444.0, 3639.0], [443.0, 2428.0], [442.0, 483.0], [441.0, 757.0], [440.0, 1684.0], [439.0, 737.0], [433.0, 329.0], [432.0, 2676.0], [435.0, 3338.0], [434.0, 2458.0], [438.0, 1215.0], [437.0, 2020.0], [436.0, 1953.0], [462.0, 1147.0], [463.0, 1572.0], [461.0, 556.0], [460.0, 2497.0], [459.0, 2398.0], [458.0, 1487.0], [457.0, 1780.0], [456.0, 1554.0], [455.0, 1344.0], [449.0, 1568.0], [448.0, 1984.0], [451.0, 637.0], [450.0, 1726.0], [454.0, 741.0], [453.0, 552.0], [452.0, 296.0], [478.0, 3584.0], [479.0, 10375.0], [477.0, 1756.0], [476.0, 1591.0], [475.0, 611.0], [474.0, 1523.0], [473.0, 1799.0], [472.0, 2229.0], [471.0, 1597.0], [465.0, 1304.0], [464.0, 2292.0], [467.0, 605.0], [466.0, 1224.0], [470.0, 1512.0], [469.0, 4050.0], [468.0, 2420.0], [494.0, 2215.0], [495.0, 2523.0], [493.0, 2220.0], [492.0, 10423.0], [491.0, 4075.0], [490.0, 2029.0], [489.0, 1241.0], [488.0, 1316.0], [487.0, 1618.0], [481.0, 1721.0], [480.0, 2052.0], [483.0, 2012.0], [482.0, 1390.0], [486.0, 597.0], [485.0, 630.0], [484.0, 5244.0], [500.0, 3215.0], [499.0, 863.0], [498.0, 1366.0], [497.0, 1150.0], [496.0, 1802.0], [1.0, 3955.0]], "isOverall": false, "label": "GET getRegistrationFromCart/", "isController": false}, {"data": [[250.5, 2416.054000000001]], "isOverall": false, "label": "GET getRegistrationFromCart/-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 65.66666666666667, "minX": 1.6466775E12, "maxY": 238.6, "series": [{"data": [[1.64667756E12, 176.61666666666667], [1.64667978E12, 207.83333333333334], [1.64667918E12, 198.83333333333334], [1.64667816E12, 165.73333333333332], [1.64667876E12, 198.83333333333334], [1.64667936E12, 136.85], [1.64668038E12, 145.85], [1.646679E12, 189.83333333333334], [1.6466796E12, 145.85], [1.64668062E12, 218.71666666666667], [1.64667798E12, 178.95], [1.64667858E12, 209.71666666666667], [1.6466802E12, 187.5], [1.64667852E12, 159.06666666666666], [1.64667912E12, 187.95], [1.64668014E12, 176.61666666666667], [1.6466775E12, 148.18333333333334], [1.64668032E12, 167.61666666666667], [1.6466781E12, 209.71666666666667], [1.64667972E12, 165.28333333333333], [1.64667774E12, 227.71666666666667], [1.64668056E12, 178.95], [1.64667834E12, 198.83333333333334], [1.64667996E12, 187.95], [1.64667894E12, 198.83333333333334], [1.64667792E12, 238.6], [1.64667954E12, 145.4], [1.64667948E12, 238.6], [1.64668008E12, 178.95], [1.64667786E12, 198.83333333333334], [1.64667846E12, 187.95], [1.64667906E12, 94.75], [1.64668068E12, 189.83333333333334], [1.6466787E12, 139.18333333333334], [1.64667768E12, 198.83333333333334], [1.6466793E12, 169.95], [1.64667828E12, 198.83333333333334], [1.6466805E12, 196.5], [1.64667888E12, 218.71666666666667], [1.6466799E12, 169.95], [1.64667822E12, 198.83333333333334], [1.64667882E12, 176.61666666666667], [1.64668044E12, 132.18333333333334], [1.6466778E12, 176.61666666666667], [1.64668002E12, 196.5], [1.64667942E12, 165.73333333333332], [1.6466784E12, 145.4], [1.64667804E12, 156.73333333333332], [1.64668026E12, 187.95], [1.64667864E12, 227.71666666666667], [1.64667966E12, 178.95], [1.64667924E12, 198.83333333333334], [1.64667984E12, 218.71666666666667], [1.64667762E12, 187.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64667756E12, 118.2], [1.64667978E12, 139.36666666666667], [1.64667918E12, 131.33333333333334], [1.64667816E12, 113.1], [1.64667876E12, 131.33333333333334], [1.64667936E12, 91.93333333333334], [1.64668038E12, 99.96666666666667], [1.646679E12, 123.3], [1.6466796E12, 99.96666666666667], [1.64668062E12, 144.46666666666667], [1.64667798E12, 118.2], [1.64667858E12, 136.43333333333334], [1.6466802E12, 123.3], [1.64667852E12, 105.06666666666666], [1.64667912E12, 126.23333333333333], [1.64668014E12, 118.2], [1.6466775E12, 99.96666666666667], [1.64668032E12, 110.16666666666667], [1.6466781E12, 136.43333333333334], [1.64667972E12, 110.16666666666667], [1.64667774E12, 152.5], [1.64668056E12, 118.2], [1.64667834E12, 131.33333333333334], [1.64667996E12, 126.23333333333333], [1.64667894E12, 131.33333333333334], [1.64667792E12, 157.6], [1.64667954E12, 97.03333333333333], [1.64667948E12, 157.6], [1.64668008E12, 118.2], [1.64667786E12, 131.33333333333334], [1.64667846E12, 126.23333333333333], [1.64667906E12, 65.66666666666667], [1.64668068E12, 123.3], [1.6466787E12, 91.93333333333334], [1.64667768E12, 131.33333333333334], [1.6466793E12, 110.16666666666667], [1.64667828E12, 131.33333333333334], [1.6466805E12, 131.33333333333334], [1.64667888E12, 144.46666666666667], [1.6466799E12, 110.16666666666667], [1.64667822E12, 131.33333333333334], [1.64667882E12, 118.2], [1.64668044E12, 91.93333333333334], [1.6466778E12, 118.2], [1.64668002E12, 131.33333333333334], [1.64667942E12, 113.1], [1.6466784E12, 97.03333333333333], [1.64667804E12, 105.06666666666666], [1.64668026E12, 126.23333333333333], [1.64667864E12, 152.5], [1.64667966E12, 118.2], [1.64667924E12, 131.33333333333334], [1.64667984E12, 144.46666666666667], [1.64667762E12, 123.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64668068E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 411.5, "minX": 1.6466775E12, "maxY": 7044.6, "series": [{"data": [[1.64667756E12, 598.3333333333334], [1.64667978E12, 581.7272727272727], [1.64667918E12, 514.5], [1.64667816E12, 540.1111111111111], [1.64667876E12, 528.6], [1.64667936E12, 443.28571428571433], [1.64668038E12, 558.0], [1.646679E12, 600.6666666666666], [1.6466796E12, 451.0], [1.64668062E12, 465.3636363636363], [1.64667798E12, 498.22222222222223], [1.64667858E12, 527.5], [1.6466802E12, 542.1111111111111], [1.64667852E12, 555.0], [1.64667912E12, 545.5], [1.64668014E12, 581.3333333333334], [1.6466775E12, 955.875], [1.64668032E12, 590.5], [1.6466781E12, 501.3], [1.64667972E12, 445.125], [1.64667774E12, 502.58333333333337], [1.64668056E12, 445.8888888888889], [1.64667834E12, 425.90000000000003], [1.64667996E12, 476.3], [1.64667894E12, 536.2000000000002], [1.64667792E12, 560.6666666666667], [1.64667954E12, 553.8571428571429], [1.64667948E12, 503.99999999999994], [1.64668008E12, 517.5555555555555], [1.64667786E12, 564.1999999999999], [1.64667846E12, 490.0], [1.64667906E12, 573.6], [1.64668068E12, 520.7777777777778], [1.6466787E12, 481.00000000000006], [1.64667768E12, 480.7], [1.6466793E12, 420.62500000000006], [1.64667828E12, 411.5], [1.6466805E12, 548.7], [1.64667888E12, 480.9090909090909], [1.6466799E12, 587.0], [1.64667822E12, 546.5], [1.64667882E12, 609.3333333333334], [1.64668044E12, 538.1428571428571], [1.6466778E12, 547.8888888888888], [1.64668002E12, 511.29999999999995], [1.64667942E12, 529.4444444444445], [1.6466784E12, 484.42857142857144], [1.64667804E12, 539.1249999999999], [1.64668026E12, 528.9000000000001], [1.64667864E12, 562.3333333333333], [1.64667966E12, 426.6666666666667], [1.64667924E12, 538.5], [1.64667984E12, 466.72727272727275], [1.64667762E12, 670.3333333333334]], "isOverall": false, "label": "POST addRegistrationToCart/", "isController": false}, {"data": [[1.64667756E12, 2683.222222222222], [1.64667978E12, 2316.2000000000003], [1.64667918E12, 1519.5], [1.64667816E12, 2908.75], [1.64667876E12, 1027.5], [1.64667936E12, 3897.142857142857], [1.64668038E12, 2796.0], [1.646679E12, 1779.1999999999998], [1.6466796E12, 2724.2857142857147], [1.64668062E12, 2042.5454545454545], [1.64667798E12, 3037.8888888888887], [1.64667858E12, 1993.9090909090908], [1.6466802E12, 2876.6000000000004], [1.64667852E12, 3078.25], [1.64667912E12, 1028.7777777777778], [1.64668014E12, 3062.5555555555557], [1.6466775E12, 1876.2857142857144], [1.64668032E12, 3521.777777777778], [1.6466781E12, 2664.090909090909], [1.64667972E12, 3989.4444444444443], [1.64667774E12, 1578.9090909090908], [1.64668056E12, 1838.0000000000002], [1.64667834E12, 1366.8999999999999], [1.64667996E12, 1610.0], [1.64667894E12, 1822.0000000000002], [1.64667792E12, 1453.1666666666665], [1.64667954E12, 3900.8749999999995], [1.64667948E12, 1193.5833333333335], [1.64668008E12, 2546.3333333333335], [1.64667786E12, 1825.4], [1.64667846E12, 1761.2222222222222], [1.64667906E12, 7044.6], [1.64668068E12, 1692.7], [1.6466787E12, 3782.571428571429], [1.64667768E12, 1826.3], [1.6466793E12, 2812.222222222222], [1.64667828E12, 1768.3999999999999], [1.6466805E12, 2290.6], [1.64667888E12, 2201.0909090909095], [1.6466799E12, 2098.1111111111113], [1.64667822E12, 2182.7], [1.64667882E12, 3397.222222222222], [1.64668044E12, 5487.000000000001], [1.6466778E12, 2325.0], [1.64668002E12, 2868.2999999999997], [1.64667942E12, 3958.0], [1.6466784E12, 4432.625], [1.64667804E12, 2757.75], [1.64668026E12, 1668.7777777777778], [1.64667864E12, 1886.6363636363637], [1.64667966E12, 2580.3333333333335], [1.64667924E12, 1675.4], [1.64667984E12, 1309.9999999999998], [1.64667762E12, 3033.6]], "isOverall": false, "label": "GET getRegistrationFromCart/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64668068E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 411.5, "minX": 1.6466775E12, "maxY": 7044.4, "series": [{"data": [[1.64667756E12, 598.3333333333334], [1.64667978E12, 581.7272727272727], [1.64667918E12, 514.5], [1.64667816E12, 540.1111111111111], [1.64667876E12, 528.6], [1.64667936E12, 443.28571428571433], [1.64668038E12, 557.8750000000001], [1.646679E12, 600.6666666666666], [1.6466796E12, 451.0], [1.64668062E12, 465.3636363636363], [1.64667798E12, 498.22222222222223], [1.64667858E12, 527.5], [1.6466802E12, 542.1111111111111], [1.64667852E12, 555.0], [1.64667912E12, 545.5], [1.64668014E12, 581.3333333333334], [1.6466775E12, 955.875], [1.64668032E12, 590.5], [1.6466781E12, 501.20000000000005], [1.64667972E12, 445.125], [1.64667774E12, 502.58333333333337], [1.64668056E12, 445.8888888888889], [1.64667834E12, 425.90000000000003], [1.64667996E12, 476.3], [1.64667894E12, 536.2000000000002], [1.64667792E12, 560.6666666666667], [1.64667954E12, 553.8571428571429], [1.64667948E12, 503.9166666666667], [1.64668008E12, 517.5555555555555], [1.64667786E12, 564.1999999999999], [1.64667846E12, 490.0], [1.64667906E12, 573.6], [1.64668068E12, 520.6666666666666], [1.6466787E12, 481.00000000000006], [1.64667768E12, 480.59999999999997], [1.6466793E12, 420.62500000000006], [1.64667828E12, 411.5], [1.6466805E12, 548.6], [1.64667888E12, 480.9090909090909], [1.6466799E12, 586.875], [1.64667822E12, 546.5], [1.64667882E12, 609.3333333333334], [1.64668044E12, 538.1428571428571], [1.6466778E12, 547.7777777777778], [1.64668002E12, 511.29999999999995], [1.64667942E12, 529.4444444444445], [1.6466784E12, 484.42857142857144], [1.64667804E12, 539.1249999999999], [1.64668026E12, 528.9000000000001], [1.64667864E12, 562.3333333333333], [1.64667966E12, 426.55555555555554], [1.64667924E12, 538.5], [1.64667984E12, 466.72727272727275], [1.64667762E12, 670.3333333333334]], "isOverall": false, "label": "POST addRegistrationToCart/", "isController": false}, {"data": [[1.64667756E12, 2683.1111111111113], [1.64667978E12, 2316.2000000000003], [1.64667918E12, 1519.5], [1.64667816E12, 2908.75], [1.64667876E12, 1027.3999999999999], [1.64667936E12, 3897.142857142857], [1.64668038E12, 2796.0], [1.646679E12, 1779.1999999999998], [1.6466796E12, 2724.2857142857147], [1.64668062E12, 2042.5454545454545], [1.64667798E12, 3037.777777777778], [1.64667858E12, 1993.9090909090908], [1.6466802E12, 2876.6000000000004], [1.64667852E12, 3078.25], [1.64667912E12, 1028.6666666666667], [1.64668014E12, 3062.5555555555557], [1.6466775E12, 1876.142857142857], [1.64668032E12, 3521.777777777778], [1.6466781E12, 2664.090909090909], [1.64667972E12, 3989.333333333334], [1.64667774E12, 1578.9090909090908], [1.64668056E12, 1838.0000000000002], [1.64667834E12, 1366.8999999999999], [1.64667996E12, 1610.0], [1.64667894E12, 1822.0000000000002], [1.64667792E12, 1453.1666666666665], [1.64667954E12, 3900.8749999999995], [1.64667948E12, 1193.5], [1.64668008E12, 2546.222222222222], [1.64667786E12, 1825.4], [1.64667846E12, 1761.2222222222222], [1.64667906E12, 7044.4], [1.64668068E12, 1692.7], [1.6466787E12, 3782.571428571429], [1.64667768E12, 1826.3], [1.6466793E12, 2812.222222222222], [1.64667828E12, 1768.2999999999997], [1.6466805E12, 2290.6], [1.64667888E12, 2201.0909090909095], [1.6466799E12, 2098.1111111111113], [1.64667822E12, 2182.7], [1.64667882E12, 3397.1111111111113], [1.64668044E12, 5487.000000000001], [1.6466778E12, 2325.0], [1.64668002E12, 2868.2000000000003], [1.64667942E12, 3958.0], [1.6466784E12, 4432.625], [1.64667804E12, 2757.625], [1.64668026E12, 1668.7777777777778], [1.64667864E12, 1886.6363636363637], [1.64667966E12, 2580.3333333333335], [1.64667924E12, 1675.3], [1.64667984E12, 1309.9999999999998], [1.64667762E12, 3033.6]], "isOverall": false, "label": "GET getRegistrationFromCart/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64668068E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6466775E12, "maxY": 82.7, "series": [{"data": [[1.64667756E12, 61.777777777777786], [1.64667978E12, 58.454545454545446], [1.64667918E12, 58.199999999999996], [1.64667816E12, 59.0], [1.64667876E12, 59.7], [1.64667936E12, 52.0], [1.64668038E12, 61.625], [1.646679E12, 61.11111111111111], [1.6466796E12, 55.625], [1.64668062E12, 61.545454545454554], [1.64667798E12, 60.111111111111114], [1.64667858E12, 57.4], [1.6466802E12, 63.77777777777778], [1.64667852E12, 61.0], [1.64667912E12, 60.5], [1.64668014E12, 61.888888888888886], [1.6466775E12, 59.875], [1.64668032E12, 63.25], [1.6466781E12, 59.5], [1.64667972E12, 57.5], [1.64667774E12, 58.99999999999999], [1.64668056E12, 58.22222222222222], [1.64667834E12, 60.9], [1.64667996E12, 54.800000000000004], [1.64667894E12, 55.1], [1.64667792E12, 54.166666666666664], [1.64667954E12, 61.857142857142854], [1.64667948E12, 55.41666666666667], [1.64668008E12, 60.00000000000001], [1.64667786E12, 64.8], [1.64667846E12, 57.3], [1.64667906E12, 63.6], [1.64668068E12, 52.55555555555556], [1.6466787E12, 62.142857142857146], [1.64667768E12, 59.0], [1.6466793E12, 59.25], [1.64667828E12, 54.5], [1.6466805E12, 55.7], [1.64667888E12, 61.54545454545455], [1.6466799E12, 59.5], [1.64667822E12, 57.8], [1.64667882E12, 64.11111111111111], [1.64668044E12, 58.85714285714286], [1.6466778E12, 58.77777777777778], [1.64668002E12, 82.7], [1.64667942E12, 59.66666666666667], [1.6466784E12, 64.14285714285715], [1.64667804E12, 63.0], [1.64668026E12, 49.0], [1.64667864E12, 56.166666666666664], [1.64667966E12, 54.33333333333334], [1.64667924E12, 57.199999999999996], [1.64667984E12, 61.36363636363637], [1.64667762E12, 59.22222222222222]], "isOverall": false, "label": "POST addRegistrationToCart/", "isController": false}, {"data": [[1.64667756E12, 0.0], [1.64667978E12, 0.0], [1.64667918E12, 0.0], [1.64667816E12, 0.0], [1.64667876E12, 0.0], [1.64667936E12, 0.0], [1.64668038E12, 0.0], [1.646679E12, 0.0], [1.6466796E12, 0.0], [1.64668062E12, 0.0], [1.64667798E12, 0.0], [1.64667858E12, 0.0], [1.6466802E12, 0.0], [1.64667852E12, 0.0], [1.64667912E12, 0.0], [1.64668014E12, 0.0], [1.6466775E12, 0.0], [1.64668032E12, 0.0], [1.6466781E12, 0.0], [1.64667972E12, 0.0], [1.64667774E12, 0.0], [1.64668056E12, 0.0], [1.64667834E12, 0.0], [1.64667996E12, 0.0], [1.64667894E12, 0.0], [1.64667792E12, 0.0], [1.64667954E12, 0.0], [1.64667948E12, 0.0], [1.64668008E12, 0.0], [1.64667786E12, 0.0], [1.64667846E12, 0.0], [1.64667906E12, 0.0], [1.64668068E12, 0.0], [1.6466787E12, 0.0], [1.64667768E12, 0.0], [1.6466793E12, 0.0], [1.64667828E12, 0.0], [1.6466805E12, 0.0], [1.64667888E12, 0.0], [1.6466799E12, 0.0], [1.64667822E12, 0.0], [1.64667882E12, 0.0], [1.64668044E12, 0.0], [1.6466778E12, 0.0], [1.64668002E12, 0.0], [1.64667942E12, 0.0], [1.6466784E12, 0.0], [1.64667804E12, 0.0], [1.64668026E12, 0.0], [1.64667864E12, 0.0], [1.64667966E12, 0.0], [1.64667924E12, 0.0], [1.64667984E12, 0.0], [1.64667762E12, 0.0]], "isOverall": false, "label": "GET getRegistrationFromCart/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64668068E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 286.0, "minX": 1.6466775E12, "maxY": 10011.0, "series": [{"data": [[1.64667756E12, 4075.0], [1.64667978E12, 5554.0], [1.64667918E12, 3758.0], [1.64667816E12, 3872.0], [1.64667876E12, 2104.0], [1.64667936E12, 8144.0], [1.64668038E12, 3171.0], [1.646679E12, 6008.0], [1.6466796E12, 2707.0], [1.64668062E12, 6298.0], [1.64667798E12, 6993.0], [1.64667858E12, 3645.0], [1.6466802E12, 5669.0], [1.64667852E12, 8795.0], [1.64667912E12, 2487.0], [1.64668014E12, 4272.0], [1.6466775E12, 3215.0], [1.64668032E12, 8480.0], [1.6466781E12, 7101.0], [1.64667972E12, 4425.0], [1.64667774E12, 2497.0], [1.64668056E12, 4777.0], [1.64667834E12, 2839.0], [1.64667996E12, 3198.0], [1.64667894E12, 5628.0], [1.64667792E12, 2676.0], [1.64667954E12, 2831.0], [1.64667948E12, 3214.0], [1.64668008E12, 8821.0], [1.64667786E12, 3639.0], [1.64667846E12, 8217.0], [1.64667906E12, 8427.0], [1.64668068E12, 3955.0], [1.6466787E12, 8374.0], [1.64667768E12, 4050.0], [1.6466793E12, 6550.0], [1.64667828E12, 3056.0], [1.6466805E12, 3263.0], [1.64667888E12, 9602.0], [1.6466799E12, 4436.0], [1.64667822E12, 4730.0], [1.64667882E12, 4295.0], [1.64668044E12, 3803.0], [1.6466778E12, 3074.0], [1.64668002E12, 4309.0], [1.64667942E12, 7349.0], [1.6466784E12, 4498.0], [1.64667804E12, 5387.0], [1.64668026E12, 3448.0], [1.64667864E12, 4881.0], [1.64667966E12, 10011.0], [1.64667924E12, 3804.0], [1.64667984E12, 2633.0], [1.64667762E12, 5244.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64667756E12, 2590.9999999999986], [1.64667978E12, 4649.200000000001], [1.64667918E12, 2155.5000000000005], [1.64667816E12, 2938.900000000001], [1.64667876E12, 1489.4], [1.64667936E12, 6577.999999999998], [1.64668038E12, 2317.0], [1.646679E12, 2797.0], [1.6466796E12, 2530.0], [1.64668062E12, 4438.699999999998], [1.64667798E12, 4639.500000000004], [1.64667858E12, 3185.6000000000004], [1.6466802E12, 2992.400000000004], [1.64667852E12, 8601.1], [1.64667912E12, 2084.0], [1.64668014E12, 3204.7999999999993], [1.6466775E12, 3057.2000000000003], [1.64668032E12, 5276.100000000003], [1.6466781E12, 5210.600000000001], [1.64667972E12, 3342.6000000000004], [1.64667774E12, 2355.6000000000004], [1.64668056E12, 3125.5000000000027], [1.64667834E12, 1878.2000000000007], [1.64667996E12, 2294.0], [1.64667894E12, 2916.700000000002], [1.64667792E12, 2561.5], [1.64667954E12, 2607.7999999999997], [1.64667948E12, 1832.5], [1.64668008E12, 3331.9000000000087], [1.64667786E12, 3247.000000000002], [1.64667846E12, 1823.0], [1.64667906E12, 8427.0], [1.64668068E12, 2542.0], [1.6466787E12, 7382.5], [1.64667768E12, 2400.9000000000005], [1.6466793E12, 6318.0], [1.64667828E12, 2468.3000000000006], [1.6466805E12, 3181.0], [1.64667888E12, 3111.2999999999993], [1.6466799E12, 3480.7999999999993], [1.64667822E12, 4332.800000000005], [1.64667882E12, 3438.999999999999], [1.64668044E12, 3362.4000000000015], [1.6466778E12, 2201.999999999999], [1.64668002E12, 3315.0], [1.64667942E12, 6218.500000000001], [1.6466784E12, 4161.599999999999], [1.64667804E12, 3387.200000000001], [1.64668026E12, 2807.0], [1.64667864E12, 3625.400000000003], [1.64667966E12, 4068.3000000000093], [1.64667924E12, 2665.300000000001], [1.64667984E12, 2278.4], [1.64667762E12, 3750.0000000000023]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64667756E12, 4075.0], [1.64667978E12, 5554.0], [1.64667918E12, 3758.0], [1.64667816E12, 3872.0], [1.64667876E12, 2104.0], [1.64667936E12, 8144.0], [1.64668038E12, 3171.0], [1.646679E12, 6008.0], [1.6466796E12, 2707.0], [1.64668062E12, 6298.0], [1.64667798E12, 6993.0], [1.64667858E12, 3645.0], [1.6466802E12, 5669.0], [1.64667852E12, 8795.0], [1.64667912E12, 2487.0], [1.64668014E12, 4272.0], [1.6466775E12, 3215.0], [1.64668032E12, 8480.0], [1.6466781E12, 7101.0], [1.64667972E12, 4425.0], [1.64667774E12, 2497.0], [1.64668056E12, 4777.0], [1.64667834E12, 2839.0], [1.64667996E12, 3198.0], [1.64667894E12, 5628.0], [1.64667792E12, 2676.0], [1.64667954E12, 2831.0], [1.64667948E12, 3214.0], [1.64668008E12, 8821.0], [1.64667786E12, 3639.0], [1.64667846E12, 8217.0], [1.64667906E12, 8427.0], [1.64668068E12, 3955.0], [1.6466787E12, 8374.0], [1.64667768E12, 4050.0], [1.6466793E12, 6550.0], [1.64667828E12, 3056.0], [1.6466805E12, 3263.0], [1.64667888E12, 9602.0], [1.6466799E12, 4436.0], [1.64667822E12, 4730.0], [1.64667882E12, 4295.0], [1.64668044E12, 3803.0], [1.6466778E12, 3074.0], [1.64668002E12, 4309.0], [1.64667942E12, 7349.0], [1.6466784E12, 4498.0], [1.64667804E12, 5387.0], [1.64668026E12, 3448.0], [1.64667864E12, 4881.0], [1.64667966E12, 10011.0], [1.64667924E12, 3804.0], [1.64667984E12, 2633.0], [1.64667762E12, 5244.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64667756E12, 4075.0], [1.64667978E12, 5492.599999999999], [1.64667918E12, 3679.3999999999987], [1.64667816E12, 3872.0], [1.64667876E12, 2073.4999999999995], [1.64667936E12, 8144.0], [1.64668038E12, 3171.0], [1.646679E12, 6008.0], [1.6466796E12, 2707.0], [1.64668062E12, 6137.049999999997], [1.64667798E12, 6993.0], [1.64667858E12, 3611.6999999999994], [1.6466802E12, 5669.0], [1.64667852E12, 8795.0], [1.64667912E12, 2487.0], [1.64668014E12, 4272.0], [1.6466775E12, 3215.0], [1.64668032E12, 8480.0], [1.6466781E12, 6941.099999999998], [1.64667972E12, 4425.0], [1.64667774E12, 2477.2], [1.64668056E12, 4777.0], [1.64667834E12, 2792.399999999999], [1.64667996E12, 3198.0], [1.64667894E12, 5497.199999999998], [1.64667792E12, 2673.25], [1.64667954E12, 2831.0], [1.64667948E12, 2872.0], [1.64668008E12, 8821.0], [1.64667786E12, 3623.95], [1.64667846E12, 8217.0], [1.64667906E12, 8427.0], [1.64668068E12, 3955.0], [1.6466787E12, 8374.0], [1.64667768E12, 3968.499999999999], [1.6466793E12, 6550.0], [1.64667828E12, 3027.95], [1.6466805E12, 3263.0], [1.64667888E12, 8666.599999999988], [1.6466799E12, 4436.0], [1.64667822E12, 4720.5], [1.64667882E12, 4295.0], [1.64668044E12, 3803.0], [1.6466778E12, 3074.0], [1.64668002E12, 4309.0], [1.64667942E12, 7349.0], [1.6466784E12, 4498.0], [1.64667804E12, 5387.0], [1.64668026E12, 3448.0], [1.64667864E12, 4792.999999999999], [1.64667966E12, 10011.0], [1.64667924E12, 3749.5499999999993], [1.64667984E12, 2586.1999999999994], [1.64667762E12, 5244.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64667756E12, 359.0], [1.64667978E12, 293.0], [1.64667918E12, 333.0], [1.64667816E12, 337.0], [1.64667876E12, 315.0], [1.64667936E12, 294.0], [1.64668038E12, 311.0], [1.646679E12, 323.0], [1.6466796E12, 317.0], [1.64668062E12, 303.0], [1.64667798E12, 324.0], [1.64667858E12, 322.0], [1.6466802E12, 323.0], [1.64667852E12, 319.0], [1.64667912E12, 298.0], [1.64668014E12, 316.0], [1.6466775E12, 349.0], [1.64668032E12, 410.0], [1.6466781E12, 321.0], [1.64667972E12, 326.0], [1.64667774E12, 323.0], [1.64668056E12, 289.0], [1.64667834E12, 297.0], [1.64667996E12, 316.0], [1.64667894E12, 322.0], [1.64667792E12, 286.0], [1.64667954E12, 316.0], [1.64667948E12, 300.0], [1.64668008E12, 320.0], [1.64667786E12, 327.0], [1.64667846E12, 303.0], [1.64667906E12, 312.0], [1.64668068E12, 332.0], [1.6466787E12, 287.0], [1.64667768E12, 315.0], [1.6466793E12, 304.0], [1.64667828E12, 299.0], [1.6466805E12, 312.0], [1.64667888E12, 294.0], [1.6466799E12, 303.0], [1.64667822E12, 329.0], [1.64667882E12, 470.0], [1.64668044E12, 325.0], [1.6466778E12, 296.0], [1.64668002E12, 305.0], [1.64667942E12, 291.0], [1.6466784E12, 344.0], [1.64667804E12, 299.0], [1.64668026E12, 315.0], [1.64667864E12, 301.0], [1.64667966E12, 314.0], [1.64667924E12, 300.0], [1.64667984E12, 313.0], [1.64667762E12, 379.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64667756E12, 646.0], [1.64667978E12, 675.0], [1.64667918E12, 642.0], [1.64667816E12, 636.0], [1.64667876E12, 605.5], [1.64667936E12, 610.0], [1.64668038E12, 684.5], [1.646679E12, 639.0], [1.6466796E12, 479.5], [1.64668062E12, 672.5], [1.64667798E12, 856.5], [1.64667858E12, 722.0], [1.6466802E12, 798.0], [1.64667852E12, 678.0], [1.64667912E12, 611.0], [1.64668014E12, 793.0], [1.6466775E12, 1029.0], [1.64668032E12, 645.0], [1.6466781E12, 858.0], [1.64667972E12, 623.0], [1.64667774E12, 628.0], [1.64668056E12, 610.5], [1.64667834E12, 677.0], [1.64667996E12, 635.0], [1.64667894E12, 738.0], [1.64667792E12, 635.0], [1.64667954E12, 652.0], [1.64667948E12, 609.5], [1.64668008E12, 745.5], [1.64667786E12, 709.5], [1.64667846E12, 615.0], [1.64667906E12, 656.0], [1.64668068E12, 619.0], [1.6466787E12, 639.5], [1.64667768E12, 638.5], [1.6466793E12, 845.0], [1.64667828E12, 590.0], [1.6466805E12, 613.0], [1.64667888E12, 617.5], [1.6466799E12, 756.0], [1.64667822E12, 682.5], [1.64667882E12, 678.0], [1.64668044E12, 622.0], [1.6466778E12, 629.0], [1.64668002E12, 757.0], [1.64667942E12, 620.5], [1.6466784E12, 614.0], [1.64667804E12, 692.0], [1.64668026E12, 627.0], [1.64667864E12, 628.0], [1.64667966E12, 607.0], [1.64667924E12, 681.0], [1.64667984E12, 614.5], [1.64667762E12, 864.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64668068E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 607.0, "minX": 1.0, "maxY": 10466.5, "series": [{"data": [[1.0, 650.0], [2.0, 607.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 10466.5], [2.0, 10197.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 607.0, "minX": 1.0, "maxY": 10466.5, "series": [{"data": [[1.0, 650.0], [2.0, 607.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 10466.5], [2.0, 10197.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.6466775E12, "maxY": 0.4, "series": [{"data": [[1.64667756E12, 0.31666666666666665], [1.64667978E12, 0.35], [1.64667918E12, 0.3333333333333333], [1.64667816E12, 0.2833333333333333], [1.64667876E12, 0.3333333333333333], [1.64667936E12, 0.23333333333333334], [1.64668038E12, 0.26666666666666666], [1.646679E12, 0.31666666666666665], [1.6466796E12, 0.26666666666666666], [1.64668062E12, 0.35], [1.64667798E12, 0.3], [1.64667858E12, 0.36666666666666664], [1.6466802E12, 0.31666666666666665], [1.64667852E12, 0.26666666666666666], [1.64667912E12, 0.3], [1.64668014E12, 0.3], [1.6466775E12, 0.25], [1.64668032E12, 0.26666666666666666], [1.6466781E12, 0.3333333333333333], [1.64667972E12, 0.26666666666666666], [1.64667774E12, 0.36666666666666664], [1.64668056E12, 0.3], [1.64667834E12, 0.35], [1.64667996E12, 0.3333333333333333], [1.64667894E12, 0.3333333333333333], [1.64667792E12, 0.38333333333333336], [1.64667954E12, 0.25], [1.64667948E12, 0.4], [1.64668008E12, 0.3], [1.64667786E12, 0.3333333333333333], [1.64667846E12, 0.3], [1.64667906E12, 0.18333333333333332], [1.64668068E12, 0.31666666666666665], [1.6466787E12, 0.25], [1.64667768E12, 0.35], [1.6466793E12, 0.3], [1.64667828E12, 0.31666666666666665], [1.6466805E12, 0.3333333333333333], [1.64667888E12, 0.35], [1.6466799E12, 0.2833333333333333], [1.64667822E12, 0.35], [1.64667882E12, 0.3], [1.64668044E12, 0.23333333333333334], [1.6466778E12, 0.31666666666666665], [1.64668002E12, 0.3333333333333333], [1.64667942E12, 0.26666666666666666], [1.6466784E12, 0.25], [1.64667804E12, 0.2833333333333333], [1.64668026E12, 0.31666666666666665], [1.64667864E12, 0.36666666666666664], [1.64667966E12, 0.3], [1.64667924E12, 0.3333333333333333], [1.64667984E12, 0.36666666666666664], [1.64667762E12, 0.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64668068E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6466775E12, "maxY": 0.4, "series": [{"data": [[1.64667756E12, 0.2833333333333333], [1.64667978E12, 0.35], [1.64667918E12, 0.3333333333333333], [1.64667816E12, 0.26666666666666666], [1.64667876E12, 0.3333333333333333], [1.64667936E12, 0.21666666666666667], [1.64668038E12, 0.23333333333333334], [1.646679E12, 0.31666666666666665], [1.6466796E12, 0.23333333333333334], [1.64668062E12, 0.36666666666666664], [1.64667798E12, 0.3], [1.64667858E12, 0.35], [1.6466802E12, 0.3], [1.64667852E12, 0.26666666666666666], [1.64667912E12, 0.31666666666666665], [1.64668014E12, 0.2833333333333333], [1.6466775E12, 0.25], [1.64668032E12, 0.26666666666666666], [1.6466781E12, 0.35], [1.64667972E12, 0.25], [1.64667774E12, 0.38333333333333336], [1.64668056E12, 0.3], [1.64667834E12, 0.3333333333333333], [1.64667996E12, 0.31666666666666665], [1.64667894E12, 0.3333333333333333], [1.64667792E12, 0.4], [1.64667954E12, 0.21666666666666667], [1.64667948E12, 0.4], [1.64668008E12, 0.3], [1.64667786E12, 0.3333333333333333], [1.64667846E12, 0.31666666666666665], [1.64667906E12, 0.13333333333333333], [1.64668068E12, 0.31666666666666665], [1.6466787E12, 0.23333333333333334], [1.64667768E12, 0.3333333333333333], [1.6466793E12, 0.2833333333333333], [1.64667828E12, 0.3333333333333333], [1.6466805E12, 0.31666666666666665], [1.64667888E12, 0.36666666666666664], [1.6466799E12, 0.2833333333333333], [1.64667822E12, 0.3333333333333333], [1.64667882E12, 0.2833333333333333], [1.64668044E12, 0.18333333333333332], [1.6466778E12, 0.2833333333333333], [1.64668002E12, 0.31666666666666665], [1.64667942E12, 0.26666666666666666], [1.6466784E12, 0.21666666666666667], [1.64667804E12, 0.25], [1.64668026E12, 0.31666666666666665], [1.64667864E12, 0.38333333333333336], [1.64667966E12, 0.3], [1.64667924E12, 0.3333333333333333], [1.64667984E12, 0.36666666666666664], [1.64667762E12, 0.3]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.64667756E12, 0.016666666666666666], [1.64667816E12, 0.016666666666666666], [1.64668014E12, 0.016666666666666666], [1.64667882E12, 0.016666666666666666], [1.64668044E12, 0.05], [1.6466778E12, 0.016666666666666666], [1.64668002E12, 0.016666666666666666], [1.64667942E12, 0.016666666666666666], [1.64668032E12, 0.016666666666666666], [1.64667936E12, 0.016666666666666666], [1.6466784E12, 0.03333333333333333], [1.64668038E12, 0.016666666666666666], [1.64667906E12, 0.03333333333333333], [1.64667972E12, 0.03333333333333333], [1.64667804E12, 0.016666666666666666], [1.6466796E12, 0.016666666666666666], [1.6466805E12, 0.016666666666666666], [1.64667954E12, 0.03333333333333333], [1.64667762E12, 0.016666666666666666], [1.6466802E12, 0.016666666666666666]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64668068E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6466775E12, "maxY": 0.2, "series": [{"data": [[1.64667756E12, 0.15], [1.64667978E12, 0.18333333333333332], [1.64667918E12, 0.16666666666666666], [1.64667816E12, 0.15], [1.64667876E12, 0.16666666666666666], [1.64667936E12, 0.11666666666666667], [1.64668038E12, 0.13333333333333333], [1.646679E12, 0.15], [1.6466796E12, 0.13333333333333333], [1.64668062E12, 0.18333333333333332], [1.64667798E12, 0.15], [1.64667858E12, 0.16666666666666666], [1.6466802E12, 0.15], [1.64667852E12, 0.13333333333333333], [1.64667912E12, 0.16666666666666666], [1.64668014E12, 0.15], [1.6466775E12, 0.13333333333333333], [1.64668032E12, 0.13333333333333333], [1.6466781E12, 0.16666666666666666], [1.64667972E12, 0.13333333333333333], [1.64667774E12, 0.2], [1.64668056E12, 0.15], [1.64667834E12, 0.16666666666666666], [1.64667996E12, 0.16666666666666666], [1.64667894E12, 0.16666666666666666], [1.64667792E12, 0.2], [1.64667954E12, 0.11666666666666667], [1.64667948E12, 0.2], [1.64668008E12, 0.15], [1.64667786E12, 0.16666666666666666], [1.64667846E12, 0.16666666666666666], [1.64667906E12, 0.08333333333333333], [1.64668068E12, 0.15], [1.6466787E12, 0.11666666666666667], [1.64667768E12, 0.16666666666666666], [1.6466793E12, 0.13333333333333333], [1.64667828E12, 0.16666666666666666], [1.6466805E12, 0.16666666666666666], [1.64667888E12, 0.18333333333333332], [1.6466799E12, 0.13333333333333333], [1.64667822E12, 0.16666666666666666], [1.64667882E12, 0.15], [1.64668044E12, 0.11666666666666667], [1.6466778E12, 0.15], [1.64668002E12, 0.16666666666666666], [1.64667942E12, 0.15], [1.6466784E12, 0.11666666666666667], [1.64667804E12, 0.13333333333333333], [1.64668026E12, 0.16666666666666666], [1.64667864E12, 0.2], [1.64667966E12, 0.15], [1.64667924E12, 0.16666666666666666], [1.64667984E12, 0.18333333333333332], [1.64667762E12, 0.15]], "isOverall": false, "label": "POST addRegistrationToCart/-success", "isController": false}, {"data": [[1.64667756E12, 0.13333333333333333], [1.64667978E12, 0.16666666666666666], [1.64667918E12, 0.16666666666666666], [1.64667816E12, 0.11666666666666667], [1.64667876E12, 0.16666666666666666], [1.64667936E12, 0.1], [1.64668038E12, 0.1], [1.646679E12, 0.16666666666666666], [1.6466796E12, 0.1], [1.64668062E12, 0.18333333333333332], [1.64667798E12, 0.15], [1.64667858E12, 0.18333333333333332], [1.6466802E12, 0.15], [1.64667852E12, 0.13333333333333333], [1.64667912E12, 0.15], [1.64668014E12, 0.13333333333333333], [1.6466775E12, 0.11666666666666667], [1.64668032E12, 0.13333333333333333], [1.6466781E12, 0.18333333333333332], [1.64667972E12, 0.11666666666666667], [1.64667774E12, 0.18333333333333332], [1.64668056E12, 0.15], [1.64667834E12, 0.16666666666666666], [1.64667996E12, 0.15], [1.64667894E12, 0.16666666666666666], [1.64667792E12, 0.2], [1.64667954E12, 0.1], [1.64667948E12, 0.2], [1.64668008E12, 0.15], [1.64667786E12, 0.16666666666666666], [1.64667846E12, 0.15], [1.64667906E12, 0.05], [1.64668068E12, 0.16666666666666666], [1.6466787E12, 0.11666666666666667], [1.64667768E12, 0.16666666666666666], [1.6466793E12, 0.15], [1.64667828E12, 0.16666666666666666], [1.6466805E12, 0.15], [1.64667888E12, 0.18333333333333332], [1.6466799E12, 0.15], [1.64667822E12, 0.16666666666666666], [1.64667882E12, 0.13333333333333333], [1.64668044E12, 0.06666666666666667], [1.6466778E12, 0.13333333333333333], [1.64668002E12, 0.15], [1.64667942E12, 0.11666666666666667], [1.6466784E12, 0.1], [1.64667804E12, 0.11666666666666667], [1.64668026E12, 0.15], [1.64667864E12, 0.18333333333333332], [1.64667966E12, 0.15], [1.64667924E12, 0.16666666666666666], [1.64667984E12, 0.18333333333333332], [1.64667762E12, 0.15]], "isOverall": false, "label": "GET getRegistrationFromCart/-success", "isController": false}, {"data": [[1.64667756E12, 0.016666666666666666], [1.64667816E12, 0.016666666666666666], [1.64668014E12, 0.016666666666666666], [1.64667882E12, 0.016666666666666666], [1.64668044E12, 0.05], [1.6466778E12, 0.016666666666666666], [1.64668002E12, 0.016666666666666666], [1.64667942E12, 0.016666666666666666], [1.64668032E12, 0.016666666666666666], [1.64667936E12, 0.016666666666666666], [1.6466784E12, 0.03333333333333333], [1.64668038E12, 0.016666666666666666], [1.64667906E12, 0.03333333333333333], [1.64667972E12, 0.03333333333333333], [1.64667804E12, 0.016666666666666666], [1.6466796E12, 0.016666666666666666], [1.6466805E12, 0.016666666666666666], [1.64667954E12, 0.03333333333333333], [1.64667762E12, 0.016666666666666666], [1.6466802E12, 0.016666666666666666]], "isOverall": false, "label": "GET getRegistrationFromCart/-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64668068E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6466775E12, "maxY": 0.4, "series": [{"data": [[1.64667756E12, 0.2833333333333333], [1.64667978E12, 0.35], [1.64667918E12, 0.3333333333333333], [1.64667816E12, 0.26666666666666666], [1.64667876E12, 0.3333333333333333], [1.64667936E12, 0.21666666666666667], [1.64668038E12, 0.23333333333333334], [1.646679E12, 0.31666666666666665], [1.6466796E12, 0.23333333333333334], [1.64668062E12, 0.36666666666666664], [1.64667798E12, 0.3], [1.64667858E12, 0.35], [1.6466802E12, 0.3], [1.64667852E12, 0.26666666666666666], [1.64667912E12, 0.31666666666666665], [1.64668014E12, 0.2833333333333333], [1.6466775E12, 0.25], [1.64668032E12, 0.26666666666666666], [1.6466781E12, 0.35], [1.64667972E12, 0.25], [1.64667774E12, 0.38333333333333336], [1.64668056E12, 0.3], [1.64667834E12, 0.3333333333333333], [1.64667996E12, 0.31666666666666665], [1.64667894E12, 0.3333333333333333], [1.64667792E12, 0.4], [1.64667954E12, 0.21666666666666667], [1.64667948E12, 0.4], [1.64668008E12, 0.3], [1.64667786E12, 0.3333333333333333], [1.64667846E12, 0.31666666666666665], [1.64667906E12, 0.13333333333333333], [1.64668068E12, 0.31666666666666665], [1.6466787E12, 0.23333333333333334], [1.64667768E12, 0.3333333333333333], [1.6466793E12, 0.2833333333333333], [1.64667828E12, 0.3333333333333333], [1.6466805E12, 0.31666666666666665], [1.64667888E12, 0.36666666666666664], [1.6466799E12, 0.2833333333333333], [1.64667822E12, 0.3333333333333333], [1.64667882E12, 0.2833333333333333], [1.64668044E12, 0.18333333333333332], [1.6466778E12, 0.2833333333333333], [1.64668002E12, 0.31666666666666665], [1.64667942E12, 0.26666666666666666], [1.6466784E12, 0.21666666666666667], [1.64667804E12, 0.25], [1.64668026E12, 0.31666666666666665], [1.64667864E12, 0.38333333333333336], [1.64667966E12, 0.3], [1.64667924E12, 0.3333333333333333], [1.64667984E12, 0.36666666666666664], [1.64667762E12, 0.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.64667756E12, 0.016666666666666666], [1.64667816E12, 0.016666666666666666], [1.64668014E12, 0.016666666666666666], [1.64667882E12, 0.016666666666666666], [1.64668044E12, 0.05], [1.6466778E12, 0.016666666666666666], [1.64668002E12, 0.016666666666666666], [1.64667942E12, 0.016666666666666666], [1.64668032E12, 0.016666666666666666], [1.64667936E12, 0.016666666666666666], [1.6466784E12, 0.03333333333333333], [1.64668038E12, 0.016666666666666666], [1.64667906E12, 0.03333333333333333], [1.64667972E12, 0.03333333333333333], [1.64667804E12, 0.016666666666666666], [1.6466796E12, 0.016666666666666666], [1.6466805E12, 0.016666666666666666], [1.64667954E12, 0.03333333333333333], [1.64667762E12, 0.016666666666666666], [1.6466802E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64668068E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

